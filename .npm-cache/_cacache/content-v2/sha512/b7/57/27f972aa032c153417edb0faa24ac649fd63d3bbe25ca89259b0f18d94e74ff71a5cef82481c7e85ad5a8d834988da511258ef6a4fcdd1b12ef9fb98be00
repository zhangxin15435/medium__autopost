{"_attachments":{},"_id":"os-paths","_rev":"649415-61f250396be0630f692b0eea","author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"description":"Determine common OS/platform paths (home, temp, ...)","dist-tags":{"latest":"7.4.0"},"license":"MIT","maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"name":"os-paths","readme":"<!-- dprint-ignore-file -->\n<!-- deno-fmt-ignore-start -->\n\n<!-- @prettier -->\n<!DOCTYPE markdown><!-- markdownlint-disable first-line-heading no-inline-html -->\n<meta charset=\"utf-8\" content=\"text/markdown\" lang=\"en\">\n<!-- -## editors ## (emacs/sublime) -*- coding: utf8-nix; tab-width: 4; mode: markdown; indent-tabs-mode: nil; basic-offset: 2; st-word_wrap: 'true' -*- ## (jEdit) :tabSize=4:indentSize=4:mode=markdown: ## (notepad++) vim:tabstop=4:syntax=markdown:expandtab:smarttab:softtabstop=2 ## modeline (see <https://archive.is/djTUD>@@<http://webcitation.org/66W3EhCAP> ) -->\n<!-- spell-checker:ignore expandtab markdownlint modeline smarttab softtabstop -->\n\n<!-- markdownlint-disable heading-increment no-duplicate-heading -->\n<!-- spell-checker:ignore (abbrev/names) CICD CJS Codacy Deno Dprint ESM ESMs JSDelivr npmJS uutils -->\n<!-- spell-checker:ignore (targets) realclean -->\n<!-- spell-checker:ignore (people) Roy Ivy III * rivy -->\n\n# [os-paths](https://github.com/rivy/js.os-paths)\n\n> Determine common OS/platform paths (home, temp, ...)\n\n[![Build status (GHA)][gha-image]][gha-url]\n[![Build status (AppVeyor)][appveyor-image]][appveyor-url]\n[![Coverage status][coverage-image]][coverage-url]\n[![License][license-image]][license-url]\n[![Style Guide][style-image]][style-url]\n&nbsp; <br/>\n[![Repository][repository-image]][repository-url]\n[![Deno version][deno-image]][deno-url]\n[![NPM version][npm-image]][npm-url]\n[![NodeJS version][nodejsv-image]][repository-url]\n[![npmJS Downloads][downloads-image]][downloads-url]\n[![JSDelivr Downloads][jsdelivr-image]][jsdelivr-url]\n\n## Installation (CJS/ESM/TypeScript)\n\n<!-- ref: [JSDelivr ~ GitHub](https://www.jsdelivr.com/documentation#id-github) @@ <https://archive.is/c8s9Y> -->\n\n```shell\nnpm install os-paths\n# or... `npm install \"git:github.com/rivy/js.os-paths\"`\n# or... `npm install \"git:github.com/rivy/js.os-paths#v7.4.0\"`\n# or... `npm install \"https://cdn.jsdelivr.net/gh/rivy/js.os-paths@v7.4.0/dist/os-paths.tgz\"`\n# or... `npm install \"https://cdn.jsdelivr.net/gh/rivy/js.os-paths@COMMIT_SHA/dist/os-paths.tgz\"`\n```\n\n## Usage\n\n#### CommonJS (CJS)\n\n```js\nconst osPaths = require('os-paths/cjs');\nconst home = osPaths.home();\nconst temp = osPaths.temp();\n```\n\n#### ECMAScript (ESM)/TypeScript\n\n```js\nimport osPaths from 'os-paths';\nconst home = osPaths.home();\nconst temp = osPaths.temp();\n```\n\n#### Deno\n\n<!-- ref: [JSDelivr ~ GitHub](https://www.jsdelivr.com/documentation#id-github) @@ <https://archive.is/c8s9Y> -->\n\n```ts\nimport osPaths from 'https://deno.land/x/os_paths@v7.4.0/src/mod.deno.ts';\n//or (via CDN, [ie, JSDelivr with GitHub version/version-range, commit, 'latest' support])...\n//import osPaths from 'https://cdn.jsdelivr.net/gh/rivy/js.os-paths@v7.4.0/src/mod.deno.ts';\n//import osPaths from 'https://cdn.jsdelivr.net/gh/rivy/js.os-paths@COMMIT_SHA/src/mod.deno.ts';\nconst home = osPaths.home();\nconst temp = osPaths.temp();\n```\n\n## API\n\n### Construction/Initialization\n\n#### `OSPaths()`\n\n```js\nconst osPaths = require('os-paths/cjs'); // CJS\n//or...\n//import osPaths from 'os-paths'; // ESM/TypeScript\n//import osPaths from 'https://deno.land/x/os_paths/src/mod.deno.ts'; // Deno\n```\n\nWhen importing this module, the object returned is a function object, `OSPaths`, augmented with attached methods. Additional `OSPaths` objects may be constructed by direct call of the imported `OSPaths` object (eg, `const p = osPaths()`) or by using `new` (eg, `const p = new osPaths()`). Notably, since the `OSPaths` object contains no instance state, all `OSPaths` objects will be functionally identical.\n\n### Methods\n\nAll methods return simple, platform-specific, and platform-compatible path strings which are normalized and have no trailing path separators.\n\nThe returned path strings are _not_ guaranteed to already exist on the file system. So, the user application is responsible for directory construction, if/when needed. However, since all of these are _standard_ OS directories, they should all exist without the need for user intervention.\n\nIf/when necessary, [`make-dir`](https://www.npmjs.com/package/make-dir) or [`mkdirp`](https://www.npmjs.com/package/mkdirp) can be used to create the directories.\n\n#### `osPaths.home(): string | undefined`\n\n- Returns the path string of the user's home directory (or `undefined` if the user's home directory is not resolvable).\n\n```js\nconsole.log(osPaths.home());\n//(*nix) => '/home/rivy\n//(windows) =>  'C:\\Users\\rivy'\n```\n\n#### `osPaths.temp(): string`\n\n- Returns the path string of the system's default directory for temporary files.\n\n```js\nconsole.log(osPaths.temp());\n//(*nix) => '/tmp'\n//(windows) =>  'C:\\Users\\rivy\\AppData\\Local\\Temp'\n```\n\n`temp()` will _always_ return a non-empty path string (as sanely as possible).\n\n## Supported Platforms\n\n### NodeJS\n\n> #### Requirements\n>\n> NodeJS >= 4.0[^*]\n\n<!--{blockquote: .--info style=\"font-size:75%;\"}-->\n\n[^*]: With the conversion to a TypeScript-based project, due to tooling constraints, building and testing are more difficult and more limited on Node platforms earlier than NodeJS-v10. However, the generated CommonJS/UMD project code is fully tested (for NodeJS-v10+) and continues to be compatible with NodeJS-v4+.\n\n#### CommonJS modules (CJS; `*.js` and `*.cjs`)\n\nCJS is the basic supported output (with support for NodeJS versions as early as NodeJS-v4).\n\n```js\nconst osPaths = require('os-paths/cjs');\nconsole.log(osPaths.home());\nconsole.log(osPaths.temp());\n```\n\n> Note: for CJS, `require('os-paths')` is supported for backward-compatibility and will execute correctly at run-time. However, `require('os-paths')` links to the default package type declarations which, though _correct_ for Deno/ESM/TypeScript, are _incorrect_ for CJS. This, then, leads to incorrect analysis of CJS files by static analysis tools such as TypeScript and Intellisense.\n>\n> Using `require('os-paths/cjs')` is preferred as it associates the proper CJS type declarations and provides correct information to static analysis tools.\n\n#### ECMAScript modules (ESM; `*.mjs`)\n\n- <small><span title=\"ESM support added in v6.0\">Requires `OSPaths` `v6.0`+.</span></small>\n\n`OSPaths` fully supports ESM imports.\n\n```js\nimport osPaths from 'os-paths';\nconsole.log(osPaths.home());\nconsole.log(osPaths.temp());\n```\n\n### TypeScript (`*.ts`)\n\n- <small><span title=\"TypeScript support added in v5.0\">Requires `OSPaths` `v5.0`+.</span></small>\n\nAs of `v5.0`+, `OSPaths` has been converted to a TypeScript-based module.\nAs a consequence, TypeScript type definitions are automatically generated, bundled, and exported by the module.\n\n### Deno\n\n> #### Requirements\n>\n> Deno >= v1.8.0[^deno-version-req]\n\n<!--{blockquote: .--info style=\"font-size:75%;\"}-->\n\n[^deno-version-req]: The `Deno.permissions` API (stabilized in Deno v1.8.0) is required to avoid needless panics or prompts by Deno during static imports of this module/package. Note: Deno v1.3.0+ may be used if the run flag `--unstable` is also used.\n\n> #### Required Permissions\n>\n> - `--allow-env` &middot; _allow access to the process environment variables_<br>\n>   This module/package requires access to various environment variables to determine platform configuration (eg, location of temp and user directories).\n\n<!--{blockquote: .--info style=\"font-size:75%;\"}-->\n\n- <small><span title=\"Deno support added in v6.0\">Requires `OSPaths` `v6.0`+.</span></small>\n\n`OSPaths` also fully supports use by Deno.\n\n```js deno\nimport osPaths from 'https://deno.land/x/os_paths/src/mod.deno.ts';\nconsole.log(osPaths.home());\nconsole.log(osPaths.temp());\n```\n\n## Building and Contributing\n\n[![Repository][repository-image]][repository-url]\n[![Build status (GHA)][gha-image]][gha-url]\n[![Build status (AppVeyor)][appveyor-image]][appveyor-url]\n[![Coverage status][coverage-image]][coverage-url]\n&nbsp; <br/>\n[![Quality status (Codacy)][codacy-image]][codacy-url]\n[![Quality status (CodeClimate)][codeclimate-image]][codeclimate-url]\n[![Quality status (CodeFactor)][codefactor-image]][codefactor-url]\n\n### Build requirements\n\n- NodeJS >= 10.14\n- a JavaScript package/project manager ([`npm`](https://www.npmjs.com/get-npm) or [`yarn`](https://yarnpkg.com))\n- [`git`](https://git-scm.com)\n\n> #### optional\n>\n> - [`bmp`](https://deno.land/x/bmp@v0.0.6) (v0.0.6+) ... synchronizes version strings within the project\n> - [`git-changelog`](https://github.com/rivy-go/git-changelog) (v1.1+) ... enables changelog automation\n\n### Quick build/test\n\n```shell\nnpm install-test\n```\n\n### Contributions/development\n\n#### _Reproducible_ setup (for CI or local development)\n\n```shell\ngit clone \"https://github.com/rivy/js.os-paths\"\ncd js.os-paths\n# * note: for WinOS, replace `cp` with `copy` (or use [uutils](https://github.com/uutils/coreutils))\n# npm\ncp .deps-lock/package-lock.json .\nnpm clean-install\n# yarn\ncp .deps-lock/yarn.lock .\nyarn --immutable --immutable-cache --check-cache\n```\n\n#### Project development scripts\n\n```shell\n> npm run help\n...\nusage: `npm run TARGET` or `npx run-s TARGET [TARGET..]`\n\nTARGETs:\n\nbuild               build/compile package\nclean               remove build artifacts\ncoverage            calculate and display (or send) code coverage [alias: 'cov']\nfix                 fix package issues (automated/non-interactive)\nfix:lint            fix ESLint issues\nfix:style           fix Prettier formatting issues\nhelp                display help\nlint                check for package code 'lint'\nlint:audit          check for `npm audit` violations in project code\nlint:commits        check for commit flaws (using `commitlint` and `cspell`)\nlint:editorconfig   check for EditorConfig format flaws (using `editorconfig-checker`)\nlint:lint           check for code 'lint' (using `eslint`)\nlint:markdown       check for markdown errors (using `remark`)\nlint:spell          check for spelling errors (using `cspell`)\nlint:style          check for format imperfections (using `prettier`)\nprerelease          clean, rebuild, and fully test (useful prior to publish/release)\nrealclean           remove all generated files\nrebuild             clean and (re-)build project\nrefresh             clean and rebuild/regenerate all project artifacts\nrefresh:dist        clean, rebuild, and regenerate project distribution\nretest              clean and (re-)test project\nreset:hard          remove *all* generated files and reinstall dependencies\nshow:deps           show package dependencies\ntest                test package\ntest:code           test package code (use `--test-code=...` to pass options to testing harness)\ntest:types          test for type declaration errors (using `tsd`)\nupdate              update/prepare for distribution [alias: 'dist']\nupdate:changelog    update CHANGELOG (using `git changelog ...`)\nupdate:dist         update distribution content\nverify              fully (and verbosely) test package\n```\n\n#### Packaging & Publishing\n\n##### Package\n\n```shell\n#=== * POSIX\n# update project VERSION strings (package.json,...)\n# * `bmp --[major|minor|patch]`; next VERSION in M.m.r (semver) format\nbmp --minor\nVERSION=$(cat VERSION)\ngit-changelog --next-tag \"v${VERSION}\" > CHANGELOG.mkd\n# create/commit updates and distribution\ngit add package.json CHANGELOG.mkd README.md VERSION .bmp.yml\ngit commit -m \"${VERSION}\"\nnpm run clean && npm run update:dist && git add dist && git commit --amend --no-edit\n# (optional) update/save dependency locks\n# * note: `yarn import` of 'package-lock.json' (when available) is faster but may not work for later versions of 'package-lock.json'\nrm -f package-lock.json yarn.lock\nnpm install --package-lock\nyarn install\nmkdir .deps-lock 2> /dev/null\ncp package-lock.json .deps-lock/\ncp yarn.lock .deps-lock/\ngit add .deps-lock\ngit commit --amend --no-edit\n# tag VERSION commit\ngit tag -f \"v${VERSION}\"\n# (optional) prerelease checkup\nnpm run prerelease\n#=== * WinOS\n@rem # update project VERSION strings (package.json,...)\n@rem # * `bmp --[major|minor|patch]`; next VERSION in M.m.r (semver) format\nbmp --minor\nfor /f %G in (VERSION) do @set \"VERSION=%G\"\ngit-changelog --next-tag \"v%VERSION%\" > CHANGELOG.mkd\n@rem # create/commit updates and distribution\ngit add package.json CHANGELOG.mkd README.md VERSION .bmp.yml\ngit commit -m \"%VERSION%\"\nnpm run clean && npm run update:dist && git add dist && git commit --amend --no-edit\n@rem # (optional) update/save dependency locks\n@rem # * note: `yarn import` of 'package-lock.json' (when available) is faster but may not work for later versions of 'package-lock.json'\ndel package-lock.json yarn.lock 2>NUL\nnpm install --package-lock\nyarn install\nmkdir .deps-lock 2>NUL\ncopy /y package-lock.json .deps-lock >NUL\ncopy /y yarn.lock .deps-lock >NUL\ngit add .deps-lock\ngit commit --amend --no-edit\n@rem # tag VERSION commit\ngit tag -f \"v%VERSION%\"\n@rem # (optional) prerelease checkup\nnpm run prerelease\n```\n\n##### Publish\n\n```shell\n# publish\n# * optional (will be done in 'prePublishOnly' by `npm publish`)\nnpm run clean && npm run test && npm run dist && git-changelog > CHANGELOG.mkd #expect exit code == 0\ngit diff-index --quiet HEAD || echo \"[lint] ERROR uncommitted changes\" # expect no output and exit code == 0\n# *\nnpm publish # `npm publish --dry-run` will perform all prepublication actions and stop just before the actual publish push\n# * if published to NPMjs with no ERRORs; push to deno.land with tag push\ngit push origin --tags\n```\n\n### Contributions\n\nContributions are welcome.\n\nAny pull requests should be based off of the default branch (`master`). And, whenever possible, please include tests for any new code, ensuring that local (via `npm test`) and remote CI testing passes.\n\nBy contributing to the project, you are agreeing to provide your contributions under the same [license](./LICENSE) as the project itself.\n\n## Related\n\n- [`xdg-app-paths`](https://www.npmjs.com/package/xdg-app-paths) ... easy XDG for applications\n- [`xdg-portable`](https://www.npmjs.com/package/xdg-portable) ... XDG Base Directory paths (cross-platform)\n\n## License\n\n[MIT](./LICENSE) © [Roy Ivy III](https://github.com/rivy)\n\n<!-- badge references -->\n\n<!-- Repository -->\n<!-- Note: for '[repository-image] ...', `%E2%81%A3` == utf-8 sequence of \"Unicode Character 'INVISIBLE SEPARATOR' (U+2063)\"; ref: <https://codepoints.net/U+2063> -->\n\n[repository-image]: https://img.shields.io/github/v/tag/rivy/js.os-paths?sort=semver&label=%E2%81%A3&logo=github&logoColor=white\n[repository-url]: https://github.com/rivy/js.os-paths\n[license-image]: https://img.shields.io/npm/l/os-paths.svg?color=tomato&style=flat\n[license-url]: license\n[nodejsv-image]: https://img.shields.io/node/v/os-paths?color=slateblue\n[style-image]: https://img.shields.io/badge/code_style-prettier-mediumvioletred.svg\n[style-url]: https://prettier.io\n\n<!-- Continuous integration/deployment (CICD) -->\n\n[appveyor-image]: https://img.shields.io/appveyor/ci/rivy/js-os-paths/master.svg?style=flat&logo=AppVeyor&logoColor=deepskyblue\n[appveyor-url]: https://ci.appveyor.com/project/rivy/js-os-paths\n[gha-image]: https://img.shields.io/github/actions/workflow/status/rivy/js.os-paths/CI.yml?label=CI&logo=github\n[gha-url]: https://github.com/rivy/js.os-paths/actions?query=workflow%3ACI\n\n<!-- Code quality -->\n\n[coverage-image]: https://img.shields.io/codecov/c/github/rivy/js.os-paths/master.svg\n[coverage-url]: https://codecov.io/gh/rivy/js.os-paths\n[codeclimate-url]: https://codeclimate.com/github/rivy/js.os-paths\n[codeclimate-image]: https://img.shields.io/codeclimate/maintainability/rivy/js.os-paths?label=codeclimate\n[codacy-image]: https://img.shields.io/codacy/grade/4fa161040bcd483890691190293ff950?label=codacy\n[codacy-url]: https://app.codacy.com/gh/rivy/js.os-paths/dashboard\n[codefactor-image]: https://img.shields.io/codefactor/grade/github/rivy/js.os-paths?label=codefactor\n[codefactor-url]: https://www.codefactor.io/repository/github/rivy/js.os-paths\n\n<!-- Distributors/Registries -->\n\n[deno-image]: https://img.shields.io/github/package-json/v/rivy/js.os-paths/master?label=deno\n[deno-url]: https://deno.land/x/os_paths\n[downloads-image]: http://img.shields.io/npm/dm/os-paths.svg?style=flat\n[downloads-url]: https://npmjs.org/package/os-paths\n[jsdelivr-image]: https://img.shields.io/jsdelivr/gh/hm/rivy/js.os-paths?style=flat\n[jsdelivr-url]: https://www.jsdelivr.com/package/gh/rivy/js.os-paths\n[npm-image]: https://img.shields.io/npm/v/os-paths.svg?style=flat\n[npm-url]: https://npmjs.org/package/os-paths\n\n<!-- Alternate/Old image/URL links -->\n\n<!-- [appveyor-image]: https://ci.appveyor.com/api/projects/status/.../branch/master?svg=true -->\n<!-- [coverage-image]: https://img.shields.io/coveralls/github/rivy/os-paths/master.svg -->\n<!-- [coverage-url]: https://coveralls.io/github/rivy/os-paths -->\n<!-- [nodejsv-image]: https://img.shields.io/node/v/os-paths.svg?style=flat&color=darkcyan -->\n<!-- [npm-image]: https://img.shields.io/npm/v/os-paths.svg?style=flat -->\n<!-- [npm-image]: https://img.shields.io/npm/v/os-paths.svg?style=flat&label=npm&logo=NPM&logoColor=linen -->\n<!-- [npm-url]: https://npmjs.org/package/os-paths -->\n<!-- [repository-image]:https://img.shields.io/badge/%E2%9D%A4-darkcyan?style=flat&logo=github -->\n<!-- [repository-image]:https://img.shields.io/github/v/tag/rivy/js.os-paths?label=%e2%80%8b&logo=github&logoColor=white&colorA=gray&logoWidth=15 -->\n<!-- [scrutinizer-image]: https://img.shields.io/scrutinizer/quality/g/rivy/js.os-paths?label=scritunizer -->\n<!-- [scrutinizer-url]: https://scrutinizer-ci.com/g/rivy/js.os-paths -->\n<!-- [style-image]: https://img.shields.io/badge/code_style-XO-darkcyan.svg -->\n<!-- [style-image]: https://img.shields.io/badge/code_style-standard-darkcyan.svg -->\n<!-- [style-url]: https://github.com/xojs/xo -->\n<!-- [style-url]: https://standardjs.com -->\n<!-- [travis-image]: https://img.shields.io/travis/rivy/js.os-paths/master.svg?style=flat&logo=Travis-CI&logoColor=silver -->\n<!-- [travis-image]: https://travis-ci.org/rivy/js.os-paths.svg?branch=master -->\n<!-- [travis-image]: https://img.shields.io/travis/rivy/js.os-paths/master.svg?style=flat&logo=travis -->\n<!-- [travis-url]: https://travis-ci.org/rivy/js.os-paths -->\n","time":{"created":"2022-01-27T07:56:41.775Z","modified":"2023-08-09T17:20:05.691Z","6.9.0":"2021-02-27T19:55:14.309Z","6.8.0":"2021-02-27T19:00:13.292Z","6.7.0":"2021-02-22T23:06:45.304Z","6.6.0":"2021-02-22T03:39:22.430Z","6.5.0":"2021-02-14T23:24:40.779Z","6.4.0":"2021-02-09T19:29:22.345Z","6.3.0":"2021-02-08T15:13:37.353Z","6.2.0":"2021-01-18T05:11:24.828Z","6.1.0":"2021-01-18T00:00:51.291Z","6.0.0":"2021-01-15T02:43:21.557Z","5.1.0":"2021-01-01T09:00:42.611Z","5.0.1":"2020-12-28T08:11:41.640Z","5.0.0":"2020-12-28T06:47:30.922Z","4.4.0":"2020-12-16T04:59:37.386Z","4.3.0":"2020-12-14T05:21:41.330Z","4.2.0":"2019-10-17T17:39:12.671Z","4.1.0":"2019-10-04T20:00:03.731Z","4.0.1":"2019-10-04T15:26:17.532Z","4.0.0":"2019-10-04T15:12:50.044Z","3.0.2":"2019-06-29T17:03:47.312Z","3.0.1":"2019-06-29T16:26:31.756Z","3.0.0":"2019-06-24T03:49:19.504Z","7.0.0":"2022-08-01T04:08:36.335Z","7.1.0":"2022-08-06T19:15:22.129Z","7.1.1":"2022-08-06T20:22:40.856Z","7.2.0":"2022-08-09T21:29:55.821Z","7.3.0":"2022-08-13T21:57:10.148Z","7.4.0":"2023-02-06T22:48:22.067Z"},"versions":{"6.9.0":{"name":"os-paths","version":"6.9.0","description":"Determine common OS/platform paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:testbed":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-testbed.succeeded \"run-s -n rebuild:testbed\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -disable-max-line-length -exclude \"(build|dist|vendor)/.*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:testbed":"shx rm -fr build/testbed && tsc -p tsconfig/tsconfig.testbed.json && shx mkdir -p build/.targets && shx touch build/.targets/build-testbed.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target dist/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.NPM_CONFIG_DRY_RUN; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch dist/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"npm run clean && npm run test --test-dist && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && npm run test --test-dist","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@rollup/plugin-replace":"^2.3.4","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"git://github.com/rivy/js-cli.exec-if-updated.git#v2.0.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"^4.1.3","unified":"^9.2.0"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/testbed/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"526bdccc877b0e43175e8b3b46a7750f0dff2d60","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@6.9.0","_nodeVersion":"12.20.0","_npmVersion":"6.14.8","dist":{"shasum":"c6ab6a0a6bac700acaa415fdceb2a4c309af78fe","size":28773,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-6.9.0.tgz","integrity":"sha512-b6fbX4phQ0zydXASUr4GNAIWGtG1LzUoHdQxUpgkpYz/WszdpVGlRKkMIaLhZnRymDz4lPQfX9cx0qvDfYPmPg=="},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_6.9.0_1614455714200_0.5959802407128836"},"_hasShrinkwrap":false,"publish_time":1614455714309,"_cnpm_publish_time":1614455714309,"_cnpmcore_publish_time":"2021-12-17T11:19:22.433Z"},"6.8.0":{"name":"os-paths","version":"6.8.0","description":"Determine common OS/platform paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:testbed":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-testbed.succeeded \"run-s -n rebuild:testbed\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -disable-max-line-length -exclude \"(build|dist|vendor)/.*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:testbed":"shx rm -fr build/testbed && tsc -p tsconfig/tsconfig.testbed.json && shx mkdir -p build/.targets && shx touch build/.targets/build-testbed.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target dist/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.NPM_CONFIG_DRY_RUN; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch dist/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"npm run clean && npm run test --test-dist && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && npm run test --test-dist","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@rollup/plugin-replace":"^2.3.4","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"git://github.com/rivy/js-cli.exec-if-updated.git#v2.0.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"^4.1.3","unified":"^9.2.0"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/testbed/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"da7d14f936b7cab68e7d5aba6e6779759c522e55","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@6.8.0","_nodeVersion":"12.20.0","_npmVersion":"6.14.8","dist":{"shasum":"28d4e7db4368e4ee1a541e21e6a99071ad5968ad","size":28726,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-6.8.0.tgz","integrity":"sha512-SN9PF//Njbhos6jtlp1kgIkcP5Cdqo5+jOQ9O3Iz9NFMQyP81flX2Isc+sR9nHCSGsotlRckWSZRR7qCLeIABQ=="},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_6.8.0_1614452413178_0.0497015331974997"},"_hasShrinkwrap":false,"publish_time":1614452413292,"_cnpm_publish_time":1614452413292,"_cnpmcore_publish_time":"2021-12-17T11:19:22.672Z"},"6.7.0":{"name":"os-paths","version":"6.7.0","description":"Determine common OS/platform paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:testbed":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-testbed.succeeded \"run-s -n rebuild:testbed\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -disable-max-line-length -exclude \"(build|dist|vendor)/.*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:testbed":"shx rm -fr build/testbed && tsc -p tsconfig/tsconfig.testbed.json && shx mkdir -p build/.targets && shx touch build/.targets/build-testbed.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target dist/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.NPM_CONFIG_DRY_RUN; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch dist/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"npm run clean && npm run test --test-dist && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && npm run test --test-dist","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@rollup/plugin-replace":"^2.3.4","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"git://github.com/rivy/js-cli.exec-if-updated.git#v2.0.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"^4.1.3","unified":"^9.2.0"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/testbed/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"7e6cebf028b16e86eadfaa5bc50140c81fd0b4d7","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@6.7.0","_nodeVersion":"14.15.0","_npmVersion":"6.14.8","dist":{"shasum":"7f5f883c762fc3f89858cae6ba5579f899f2a167","size":28665,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-6.7.0.tgz","integrity":"sha512-wZJDEw3awKYA13RrSyMRVNfyGmT49mG5YT0pbf0QrnaupaA6uXmtlnem1Hz1DZsWivDE9uxkJJ27IqsDctP9Gg=="},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_6.7.0_1614035205137_0.23139436944920866"},"_hasShrinkwrap":false,"publish_time":1614035205304,"_cnpm_publish_time":1614035205304,"_cnpmcore_publish_time":"2021-12-17T11:19:23.030Z"},"6.6.0":{"name":"os-paths","version":"6.6.0","description":"Determine common OS/platform paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:testbed":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-testbed.succeeded \"run-s -n rebuild:testbed\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -disable-max-line-length -exclude \"(build|dist|vendor)/.*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:testbed":"shx rm -fr build/testbed && tsc -p tsconfig/tsconfig.testbed.json && shx mkdir -p build/.targets && shx touch build/.targets/build-testbed.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target dist/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.NPM_CONFIG_DRY_RUN; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch dist/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"npm run clean && npm run test --test-dist && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && npm run test --test-dist","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@rollup/plugin-replace":"^2.3.4","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"git://github.com/rivy/js-cli.exec-if-updated.git#v2.0.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typescript":"^4.1.3","unified":"^9.2.0"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/testbed/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"8b549b96ea32e78eae048fbbc10ef0cd2743ba61","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@6.6.0","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"shasum":"c9f171150455dd2a7900b46757dcaa78d7fa2528","size":28418,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-6.6.0.tgz","integrity":"sha512-1hk4qnY/yVXvJsziCaMkzKdRIqJbPBJYxMuKuql7g3Oxdx+ns9F8N5Nig5S5RYrcHFPzMmedMxTyeQr6fVnJ9g=="},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_6.6.0_1613965162225_0.10621563814008117"},"_hasShrinkwrap":false,"publish_time":1613965162430,"_cnpm_publish_time":1613965162430,"_cnpmcore_publish_time":"2021-12-17T11:19:23.267Z"},"6.5.0":{"name":"os-paths","version":"6.5.0","description":"Determine common OS/platform paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:tests":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-tests.succeeded \"run-s -n rebuild:tests\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -disable-max-line-length -exclude \"(build|dist|vendor)/.*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:tests":"shx rm -fr build/tests_ && tsc -p tsconfig/tsconfig.tests.json && shx mkdir -p build/.targets && shx touch build/.targets/build-tests.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target dist/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.NPM_CONFIG_DRY_RUN; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch dist/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"npm run clean && npm run test --test-dist && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && npm run test --test-dist","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@rollup/plugin-replace":"^2.3.4","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"git://github.com/rivy/js-cli.exec-if-updated.git#v2.0.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typescript":"^4.1.3","unified":"^9.2.0"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/tests_/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"13cbf99b92aad5d8cd8067f0bde7d05b375d5c73","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@6.5.0","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"shasum":"92f3d8cbea5d7b1e5db6f0cee1c96c05fe5521db","size":27613,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-6.5.0.tgz","integrity":"sha512-YckWbnvDRw4gdqpyPWXA11lVgulMBWI29RqmkxskbJYvilGXB4ym9V5GVPnTRnbEWwxwpCrW8Hd+elQ5XlmbWw=="},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_6.5.0_1613345080613_0.06581273326006087"},"_hasShrinkwrap":false,"publish_time":1613345080779,"_cnpm_publish_time":1613345080779,"_cnpmcore_publish_time":"2021-12-17T11:19:23.517Z"},"6.4.0":{"name":"os-paths","version":"6.4.0","description":"Determine common OS/platform paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":[{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./dist/cjs/mod.cjs.js"],"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","node6","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-p --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:tests":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs+tests.succeeded \"run-s -n rebuild:tests\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:tests":"shx rm -fr build/cjs+tests && tsc -p tsconfig/tsconfig.tests.json && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs+tests.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target dist/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx mkdir -p dist && shx rm -fr dist/cjs dist/esm && shx cp -r build/cjs build/esm dist","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.NPM_CONFIG_DRY_RUN; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch dist/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## lifecycle scripts ##":"","prepublishOnly":"npm run clean && npm run test --test-for-dist && run-s --silent update _:vcs-strictly-clean-err","preversion":"run-s --silent _:version:spell:changelog_update && npm run test --test-for-dist","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@rollup/plugin-replace":"^2.3.4","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"git://github.com/rivy/js-cli.exec-if-updated.git#v2.0.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typescript":"^4.1.3","unified":"^9.2.0"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/cjs+tests/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"4a37640309bb3e1e9c1ebd1af6ad5fdeb0a94d77","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@6.4.0","_nodeVersion":"14.15.1","_npmVersion":"6.14.8","dist":{"shasum":"3664bf36465023d75ebfb54d73f8f3fbe36c3c00","size":26493,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-6.4.0.tgz","integrity":"sha512-nyQULYyocQVgFpfxvV8IIkWtzEHefN3HaiBTiYhgzcoBIJO6jWU5kqQNTrD8kSJjH6P4Bf/5Jj3S6u9SBZ4/SQ=="},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_6.4.0_1612898962202_0.7506280074627352"},"_hasShrinkwrap":false,"publish_time":1612898962345,"_cnpm_publish_time":1612898962345,"_cnpmcore_publish_time":"2021-12-17T11:19:23.818Z"},"6.3.0":{"name":"os-paths","version":"6.3.0","description":"Determine common OS/platform paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/index.js","module":"./dist/cjs/esm-wrapper/index.js","types":"./dist/types/index.d.ts","exports":{"./package.json":"./package.json",".":[{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/index.js","require":"./dist/cjs/index.js","types":"./dist/types/index.d.ts"},"./dist/cjs/index.js"]},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","node6","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-p --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source rollup.config.js --source \"src/**\" --target \"build/cjs/**\" \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source rollup.config.js --source \"src/**\" --target \"build/esm/**\" \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source rollup.config.js --source \"src/**\" --target \"build/umd/**\" \"run-s -n rebuild:umd\"","build:tests":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source rollup.config.js --source \"src/**\" --target \"build/cjs+tests/**\" \"run-s -n rebuild:tests\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source rollup.config.js --source \"src/**\" --target \"build/types/**\" \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs","## rebuild:esm * [2020-12-22; rivy] TS compiles to ESMs are broken due to extension mishandling (use `rollup`)":"tsc -p tsconfig/tsconfig.esm.json","rebuild:esm":"shx rm -fr build/esm && rollup -c .rollup.config.js","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json","rebuild:tests":"shx rm -fr build/cjs+tests && tsc -p tsconfig/tsconfig.tests.json","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target \"dist\" \"run-s --silent \"_:update:dist:rebuild\"\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:if-newer:lint":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source rollup.config.js --source \"src/**\" --target \"build/**\" --target build \"run-s --print-name lint\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx mkdir -p dist && shx rm -fr dist/cjs dist/esm && shx cp -r build/cjs build/esm dist","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## lifecycle scripts ##":"","prepublishOnly":"npm run test --test-for-dist && run-s --silent _:update:changelog _:update:dist.build _:update:dist.normalizeEOL && run-s --silent _:vcs-strictly-clean-err","preversion":"run-s --silent _:version:spell:changelog_update && npm run test --test-for-dist","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"git://github.com/rivy/js-cli.exec-if-updated.git#v2.0.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typescript":"^4.1.3","unified":"^9.2.0"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"30s","typescript":{"rewritePaths":{"src/":"build/cjs+tests/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"prettier # overrides/[*.markdown]/tabWidth":"// set to 4 when https://github.com/prettier/prettier/issues/5019 is fixed","prettier":{"printWidth":100,"singleQuote":true,"useTabs":true,"tabWidth":2,"overrides":[{"files":["*.md","*.mkd","*.markdown"],"options":{"tabWidth":2,"useTabs":false}}]},"tsd":{"directory":"test"},"gitHead":"70da5dd1d3a86b4836a5aa0d6b2a72351065272f","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@6.3.0","_nodeVersion":"14.15.0","_npmVersion":"6.14.8","dist":{"shasum":"cbd831394190c9096dbb9720f38630dd5a8d9a43","size":25269,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-6.3.0.tgz","integrity":"sha512-0seeRC6+0GqVZWWoF8HgnTl+DSdWaH6XAhOsbHSWeC6TphzRVTfTTYBNtlvgdwgwAnAp5eCJeS1ax74cMVZ62Q=="},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_6.3.0_1612797217227_0.09842766220778221"},"_hasShrinkwrap":false,"publish_time":1612797217353,"_cnpm_publish_time":1612797217353,"_cnpmcore_publish_time":"2021-12-17T11:19:24.119Z"},"6.2.0":{"name":"os-paths","version":"6.2.0","description":"Determine common OS/platform paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/index.js","module":"./dist/cjs/esm-wrapper/index.js","types":"./dist/types/index.d.ts","exports":{"./package.json":"./package.json",".":[{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/index.js","require":"./dist/cjs/index.js","types":"./dist/types/index.d.ts"},"./dist/cjs/index.js"]},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","node6","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s \"+:regen:build\"","build:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json","build:cjs/esm":"shx rm -fr build/cjs/esm-wrapper && shx mkdir -p build/cjs && shx cp -r src/esm-wrapper build/cjs","## build:esm * [2020-12-22; rivy] TS compiles to ESMs are broken due to extension mishandling (use `rollup`)":"tsc -p tsconfig/tsconfig.esm.json","build:esm":"shx rm -fr build/esm && rollup -c .rollup.config.js","build:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json","build:tests":"shx rm -fr build/cjs+tests && tsc -p tsconfig/tsconfig.tests.json","build:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && run-s --silent _:update:dist.types","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s \"+:regen:lint/build\" && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s \"+:regen:build\" \"+:update:dist\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s \"+:regen:build+test:code\" && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","+:regen:build":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source rollup.config.js --source \"src/**\" --target \"build/**\" run-p \"build:*\"","+:regen:build+test:code":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source rollup.config.js --source \"src/**\" --target \"build/**\" run-p \"build:*\" && run-s test:code","+:regen:update":"exec-if-updated --source \"build/**\" --target \"dist/**\" run-s --silent _:update:dist.build _:update:dist.types _:update:dist.build _:update:dist.normalizeEOF _:update:dist.pack","+:regen:lint/build":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source rollup.config.js --source \"src/**\" --target \"build/**\" run-s lint \"+:regen:build\"","+:update:dist":"run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx mkdir -p dist && shx rm -fr dist/cjs dist/esm && shx cp -r build/cjs build/esm dist","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"npm pack && shx mkdir -p dist && shx mv os-paths-*.tgz dist/os-paths.tgz","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && shx cp -r build/types dist","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## lifecycle scripts ##":"","prepublishOnly":"npm run test --test-for-dist && run-s --silent _:update:changelog _:update:dist.build _:update:dist.normalizeEOL && run-s --silent _:vcs-strictly-clean-err","preversion":"npm run test --test-for-dist && run-s --silent _:version:spell:changelog_update && run-s --silent _:vcs-strictly-clean-err","version":"run-s --silent _:version:update:changelog && run-s lint:spell \"+:update:dist\" && git add CHANGELOG.mkd dist"},"dependencies":{},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"^1.1.1","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-recommended":"^5.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typescript":"^4.1.3"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"30s","typescript":{"rewritePaths":{"src/":"build/cjs+tests/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"prettier # overrides/[*.markdown]/tabWidth":"// set to 4 when https://github.com/prettier/prettier/issues/5019 is fixed","prettier":{"printWidth":100,"singleQuote":true,"useTabs":true,"tabWidth":2,"overrides":[{"files":["*.md","*.mkd","*.markdown"],"options":{"tabWidth":2,"useTabs":false}}]},"tsd":{"directory":"test"},"gitHead":"2ccf7ff5fe84eb8fb7dcf31bfcc66714f586ef37","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@6.2.0","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"shasum":"26ebe3b295f9abefed01a2ede92eee3ce475c99a","size":24897,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-6.2.0.tgz","integrity":"sha512-WRvDJdVvKQawjLwqbtUPlHFBtPA2O4zSIVid1JPd0rSxPpKi+HVYruzZNYLn0dyY9s/ixmRMnmLh1QqtOggJNw=="},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_6.2.0_1610946684607_0.863598821671232"},"_hasShrinkwrap":false,"publish_time":1610946684828,"_cnpm_publish_time":1610946684828,"_cnpmcore_publish_time":"2021-12-17T11:19:24.387Z"},"6.1.0":{"name":"os-paths","version":"6.1.0","description":"Determine common OS/platform paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/index.js","module":"./dist/cjs/esm-wrapper/index.js","types":"./dist/types/index.d.ts","exports":{"./package.json":"./package.json",".":[{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/index.js","require":"./dist/cjs/index.js","types":"./dist/types/index.d.ts"},"./dist/cjs/index.js"]},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","node6","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s \"+:regen:build\"","build:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json","build:cjs/esm":"shx rm -fr build/cjs/esm-wrapper && shx mkdir -p build/cjs && shx cp -r src/esm-wrapper build/cjs","## build:esm * [2020-12-22; rivy] TS compiles to ESMs are broken due to extension mishandling (use `rollup`)":"tsc -p tsconfig/tsconfig.esm.json","build:esm":"shx rm -fr build/esm && rollup -c .rollup.config.js","build:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json","build:tests":"shx rm -fr build/cjs+tests && tsc -p tsconfig/tsconfig.tests.json","build:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && run-s --silent _:update:dist.types","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s \"+:regen:lint/build\" && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s \"+:regen:build\" \"+:update:dist\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s \"+:regen:build+test:code\" && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","+:regen:build":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source rollup.config.js --source \"src/**\" --target \"build/**\" run-p \"build:*\"","+:regen:build+test:code":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source rollup.config.js --source \"src/**\" --target \"build/**\" run-p \"build:*\" && run-s test:code","+:regen:update":"exec-if-updated --source \"build/**\" --target \"dist/**\" run-s --silent _:update:dist.build _:update:dist.types _:update:dist.build _:update:dist.normalizeEOF _:update:dist.pack","+:regen:lint/build":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source rollup.config.js --source \"src/**\" --target \"build/**\" run-s lint \"+:regen:build\"","+:update:dist":"run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx mkdir -p dist && shx rm -fr dist/cjs dist/esm && shx cp -r build/cjs build/esm dist","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"npm pack && shx mkdir -p dist && shx mv os-paths-*.tgz dist/os-paths.tgz","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && shx cp -r build/types dist","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## lifecycle scripts ##":"","prepublishOnly":"npm run test --test-for-dist && run-s --silent _:update:changelog _:update:dist.build _:update:dist.normalizeEOL && run-s --silent _:vcs-strictly-clean-err","preversion":"npm run test --test-for-dist && run-s --silent _:version:spell:changelog_update && run-s --silent _:vcs-strictly-clean-err","version":"run-s --silent _:version:update:changelog && run-s lint:spell \"+:update:dist\" && git add CHANGELOG.mkd dist"},"dependencies":{},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"^1.1.1","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-recommended":"^5.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typescript":"^4.1.3"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"timeout":"30s","typescript":{"rewritePaths":{"src/":"build/cjs+tests/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"prettier # overrides/[*.markdown]/tabWidth":"// set to 4 when https://github.com/prettier/prettier/issues/5019 is fixed","prettier":{"printWidth":100,"singleQuote":true,"useTabs":true,"tabWidth":2,"overrides":[{"files":["*.md","*.mkd","*.markdown"],"options":{"tabWidth":2,"useTabs":false}}]},"tsd":{"directory":"test"},"gitHead":"7f02acfa0e44c1175ad476bda70c84998e54bc7f","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@6.1.0","_nodeVersion":"12.20.1","_npmVersion":"6.14.10","dist":{"shasum":"9ea32cf538112d9c45cf9696ba25dcb3cb9a4f4a","size":24806,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-6.1.0.tgz","integrity":"sha512-3lbIuoQ9boYZy40n+Vbirr6MpYZhq4AZIBdiVk/e6IkxS/4BZgI89MW1p2BcQorzhNp8DGL7dAQgSreUDWeW0Q=="},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_6.1.0_1610928051077_0.8257881319189475"},"_hasShrinkwrap":false,"publish_time":1610928051291,"_cnpm_publish_time":1610928051291,"_cnpmcore_publish_time":"2021-12-17T11:19:24.682Z"},"6.0.0":{"name":"os-paths","version":"6.0.0","description":"Generate portable common OS paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"dist/cjs/index.js","module":"dist/cjs/esm-wrapper/index.js","types":"dist/types/index.d.ts","exports":{"./package.json":"./package.json",".":[{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/index.js","require":"./dist/cjs/index.js","types":"./dist/types/index.d.ts"},"./dist/cjs/index.js"]},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","node6","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s \"+:regen:build\"","build:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json","build:cjs/esm":"shx rm -fr build/cjs/esm-wrapper && shx mkdir -p build/cjs && shx cp -r src/esm-wrapper build/cjs","## build:esm * [2020-12-22; rivy] TS compiles to ESMs are broken due to extension mishandling (use `rollup`)":"tsc -p tsconfig/tsconfig.esm.json","build:esm":"shx rm -fr build/esm && rollup -c .rollup.config.js","build:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json","build:tests":"shx rm -fr build/cjs+tests && tsc -p tsconfig/tsconfig.tests.json","build:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && run-s --silent _:update:dist.types","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s \"+:regen:lint/build\" && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && ava || ( run-s --silent +:min-node-10 && nyc --silent ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s \"+:regen:build\" \"+:update:dist\"","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s \"+:regen:build+test:code\" && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","+:regen:build":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source rollup.config.js --source \"src/**\" --target \"build/**\" run-p \"build:*\"","+:regen:build+test:code":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source rollup.config.js --source \"src/**\" --target \"build/**\" run-p \"build:*\" && run-s test:code","+:regen:update":"exec-if-updated --source \"build/**\" --target \"dist/**\" run-s --silent _:update:dist.build _:update:dist.types _:update:dist.build _:update:dist.normalizeEOF _:update:dist.pack","+:regen:lint/build":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source rollup.config.js --source \"src/**\" --target \"build/**\" run-s lint \"+:regen:build\"","+:update:dist":"run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx mkdir -p dist && shx rm -fr dist/cjs dist/esm && shx cp -r build/cjs build/esm dist","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"npm pack && shx mkdir -p dist && shx mv os-paths-*.tgz dist/os-paths.tgz","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && shx cp -r build/types dist","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## lifecycle scripts ##":"","prepublishOnly":"npm run test --test-for-dist && run-s --silent _:update:changelog _:update:dist.build _:update:dist.normalizeEOL && run-s --silent _:vcs-strictly-clean-err","preversion":"npm run test --test-for-dist && run-s --silent _:version:spell:changelog_update && run-s --silent _:vcs-strictly-clean-err","version":"run-s --silent _:version:update:changelog && run-s lint:spell \"+:update:dist\" && git add CHANGELOG.mkd dist"},"dependencies":{},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^7.0.3","cspell":"^4.2.7","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"^1.1.1","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-recommended":"^5.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typescript":"^4.1.3"},"optionalDependencies":{},"ava":{"files":["!**/*.test-d.ts"],"typescript":{"rewritePaths":{"src/":"build/cjs+tests/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"prettier # overrides/[*.markdown]/tabWidth":"// set to 4 when https://github.com/prettier/prettier/issues/5019 is fixed","prettier":{"printWidth":100,"singleQuote":true,"useTabs":true,"tabWidth":2,"overrides":[{"files":["*.md","*.mkd","*.markdown"],"options":{"tabWidth":2,"useTabs":false}}]},"tsd":{"directory":"test"},"gitHead":"060fe5304a460b49d5f4448a12d6430541f8ecaa","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@6.0.0","_nodeVersion":"12.20.0","_npmVersion":"6.14.8","dist":{"shasum":"e96a51a16ab9b777c45d460a64883429d581a74f","size":23273,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-6.0.0.tgz","integrity":"sha512-hmyizWMNiakq5EURCeOjfxEXFsUWee6GpeaiqZLsrcJa7SBuCmEIg6LqJYrQ5ckXvIVC0QRKZr/TUx6gSlAzRA=="},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_6.0.0_1610678601406_0.492466110600984"},"_hasShrinkwrap":false,"publish_time":1610678601557,"_cnpm_publish_time":1610678601557,"_cnpmcore_publish_time":"2021-12-17T11:19:25.356Z"},"5.1.0":{"name":"os-paths","version":"5.1.0","description":"Generate portable common OS paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 6.0"},"type":"commonjs","main":"dist/cjs/index.js","module":"dist/cjs/esm-wrapper/index.js","types":"dist/types/index.d.ts","keywords":["common","cross-platform","directory","environment","linux","mac","macos","node6","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s _:regen:build","build:cjs":"tsc -p tsconfig/tsconfig.cjs.json","## build:esm * [2020-12-22; rivy] TS compiles to ESMs are broken due to extension mishandling (use `rollup`)":"tsc -p tsconfig/tsconfig.esm.json","build:umd":"tsc -p tsconfig/tsconfig.umd.json","build:tests":"tsc -p tsconfig/tsconfig.tests.json","build:types":"tsc -p tsconfig/tsconfig.types.json && run-s _:update:dist.types","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent _:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s _:coverage","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","# lint # check for package code 'lint'":"","lint":"run-s --silent _:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p lint:*","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent show:deps:prod show:deps:dev || shx true","show:deps:dev":"npm --silent ls --only development || shx true","show:deps:prod":"npm --silent ls --only production || shx true","# test # test package":"","test":"run-s _:regen:lint/build && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent _:max-node-8 && (ava || exit 1) || nyc --silent ava","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent _:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && (git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\")","# update:dist # update distribution content":"","update:dist":"run-s _:regen:build _:update:dist","_:coverage":"run-s _:regen:build+test:code && is-ci && run-s cov:send || run-s cov:view","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || (shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1)","_:max-node-8":"is-node-not-modern 10","_:min-node-10":"is-node-modern 10","_:regen:build":"run-p \"build:*\"","_:regen:build+test:code":"run-p \"build:*\" && run-s test:code","_:regen:lint/build":"run-s lint \"_:regen:build\"","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || (shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1)","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || (shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1)","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist":"run-s _:update:dist.build _:update:dist.types _:update:dist.pack","_:update:dist.build":"shx mkdir -p dist && shx cp -r build/cjs dist","_:update:dist.pack":"npm pack && shx mv os-paths-*.tgz dist/os-paths.tgz","_:update:dist.types":"shx mkdir -p dist && shx cp -r build/types dist","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","prepublishOnly":"run-s test _:update:changelog _:update:dist.build _:vcs-strictly-clean-err","preversion":"run-s test _:vcs-strictly-clean-err _:version:spell:changelog_update","version":"run-s _:version:update:changelog lint:spell _:update:dist && git add CHANGELOG.mkd dist"},"dependencies":{},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.14","@typescript-eslint/eslint-plugin":"^4.0.1","@typescript-eslint/parser":"^4.0.1","ava":"^1.4.1","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^6.0.5","cspell":"^4.1.2","eslint":"^7.11.0","eslint-config-prettier":"^6.11.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.0.2 <3.2.0","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-recommended":"^5.0.0","rimraf":"^3.0.2","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.13.1","typescript":"^4.1.3"},"optionalDependencies":{},"ava":{"typescript":{"rewritePaths":{"src/":"build/cjs+tests/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"prettier # overrides/[*.markdown]/tabWidth":"// set to 4 when https://github.com/prettier/prettier/issues/5019 is fixed","prettier":{"printWidth":100,"singleQuote":true,"useTabs":true,"tabWidth":2,"overrides":[{"files":["*.md","*.mkd","*.markdown"],"options":{"tabWidth":2,"useTabs":false}}]},"tsd":{"directory":"test"},"gitHead":"c34dd252d57060503f47ad4c602bae87ef498530","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@5.1.0","_nodeVersion":"12.20.0","_npmVersion":"6.14.8","dist":{"shasum":"49f93c3cd56562d736f4b81f4835ebbd2076af95","size":18853,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-5.1.0.tgz","integrity":"sha512-f/lxOyH/nJxmJfnyLnWNcFXWqLTnTXwRuPeNLGSf6u6P8kD4oYuZl49y3VuHVQfjB3DOxetSU2YSHcv7N0qDpw=="},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_5.1.0_1609491642449_0.16153312624954186"},"_hasShrinkwrap":false,"publish_time":1609491642611,"_cnpm_publish_time":1609491642611,"_cnpmcore_publish_time":"2021-12-17T11:19:25.582Z"},"5.0.1":{"name":"os-paths","version":"5.0.1","description":"Generate portable common OS paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 6.0"},"type":"commonjs","main":"dist/cjs/index.js","module":"dist/cjs/esm-wrapper/index.js","types":"dist/types/index.d.ts","keywords":["common","cross-platform","directory","environment","linux","mac","macos","node6","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s _:regen:build","build:cjs":"tsc -p tsconfig/tsconfig.cjs.json","## build:esm * [2020-12-22; rivy] TS compiles to ESMs are broken due to extension mishandling (use `rollup`)":"tsc -p tsconfig/tsconfig.esm.json","build:umd":"tsc -p tsconfig/tsconfig.umd.json","build:tests":"tsc -p tsconfig/tsconfig.tests.json","build:types":"tsc -p tsconfig/tsconfig.types.json && run-s _:update:dist.types","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent _:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s _:coverage","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","# lint # check for package code 'lint'":"","lint":"run-s --silent _:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p lint:*","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# test # test package":"","test":"run-s _:regen:lint/build && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent _:max-node-8 && (ava || exit 1) || nyc --silent ava","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent _:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && (git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\")","# update:dist # update distribution content":"","update:dist":"run-s _:regen:build _:update:dist","_:coverage":"run-s _:regen:build+test:code && is-ci && run-s cov:send || run-s cov:view","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || (shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1)","_:max-node-8":"is-node-not-modern 10","_:min-node-10":"is-node-modern 10","_:regen:build":"run-p \"build:*\"","_:regen:build+test:code":"run-p \"build:*\" && run-s test:code","_:regen:lint/build":"run-s lint \"_:regen:build\"","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || (shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1)","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || (shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1)","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist":"run-s _:update:dist.build && npm pack && shx mv os-paths-*.tgz dist/os-paths.tgz","_:update:dist.build":"shx mkdir -p dist && shx cp -r build/cjs build/types dist","_:update:dist.types":"shx mkdir -p dist && shx cp -r build/types dist","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","prepublishOnly":"run-s test _:update:dist.build _:vcs-strictly-clean-err","preversion":"run-s test update _:vcs-strictly-clean-err","version":"run-s _:version:update:changelog lint:spell _:update:dist && git add CHANGELOG.mkd dist"},"dependencies":{},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.14","@typescript-eslint/eslint-plugin":"^4.0.1","@typescript-eslint/parser":"^4.0.1","ava":"^1.4.1","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^6.0.5","cspell":"^4.1.2","eslint":"^7.11.0","eslint-config-prettier":"^6.11.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.0.2","eslint-plugin-import":"^2.22.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-recommended":"^5.0.0","rimraf":"^3.0.2","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.13.1","typescript":"^4.1.3"},"optionalDependencies":{},"ava":{"typescript":{"rewritePaths":{"src/":"build/cjs+tests/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"prettier # overrides/[*.markdown]/tabWidth":"// set to 4 when https://github.com/prettier/prettier/issues/5019 is fixed","prettier":{"printWidth":100,"singleQuote":true,"useTabs":true,"tabWidth":2,"overrides":[{"files":["*.md","*.mkd","*.markdown"],"options":{"tabWidth":2,"useTabs":false}}]},"tsd":{"directory":"test"},"gitHead":"d920ab4e51dad5e387d78a1920e6a0cde560d5e8","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@5.0.1","_nodeVersion":"12.20.0","_npmVersion":"6.14.8","dist":{"shasum":"9f1d230c937d07407dfda978077780cf6b312274","size":17209,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-5.0.1.tgz","integrity":"sha512-0RqLkaYN+pAWxYmPn+FgVilfsmeT1Wb95ZEOS4FqYe5nvsP34Zu9CqE2TpU6iuSCFk7RWBGl0Fjstf3D3LnMLg=="},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_5.0.1_1609143101431_0.013212164414121652"},"_hasShrinkwrap":false,"publish_time":1609143101640,"_cnpm_publish_time":1609143101640,"_cnpmcore_publish_time":"2021-12-17T11:19:25.800Z"},"5.0.0":{"name":"os-paths","version":"5.0.0","description":"Generate portable common OS paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 6.0"},"type":"commonjs","main":"dist/cjs/index.js","module":"dist/cjs/esm-wrapper/index.js","types":"dist/types/index.d.ts","keywords":["common","cross-platform","directory","environment","linux","mac","macos","node6","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s _:regen:build","build:cjs":"tsc -p tsconfig/tsconfig.cjs.json","## build:esm * [2020-12-22; rivy] TS compiles to ESMs are broken due to extension mishandling (use `rollup`)":"tsc -p tsconfig/tsconfig.esm.json","build:umd":"tsc -p tsconfig/tsconfig.umd.json","build:tests":"tsc -p tsconfig/tsconfig.tests.json","build:types":"tsc -p tsconfig/tsconfig.types.json && run-s _:update:dist.types","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent _:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s _:coverage","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","# lint # check for package code 'lint'":"","lint":"run-s --silent _:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p lint:*","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --list-different","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# test # test package":"","test":"run-s _:regen:lint/build && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent _:max-node-8 && (ava || exit 1) || nyc --silent ava","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent _:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && (git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\")","# update:dist # update distribution content":"","update:dist":"run-s _:regen:build _:update:dist","_:coverage":"run-s _:regen:build+test:code && is-ci && run-s cov:send || run-s cov:view","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || (shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1)","_:max-node-8":"is-node-not-modern 10","_:min-node-10":"is-node-modern 10","_:regen:build":"run-p \"build:*\"","_:regen:build+test:code":"run-p \"build:*\" && run-s test:code","_:regen:lint/build":"run-s lint \"_:regen:build\"","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || (shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1)","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || (shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1)","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist":"run-s _:update:dist.build && npm pack && shx mv os-paths-*.tgz dist/os-paths.tgz","_:update:dist.build":"shx mkdir -p dist && shx cp -r build/cjs build/types dist","_:update:dist.types":"shx mkdir -p dist && shx cp -r build/types dist","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","prepublishOnly":"run-s test _:update:dist.build _:vcs-strictly-clean-err","preversion":"run-s test update _:vcs-strictly-clean-err","version":"run-s _:version:update:changelog lint:spell _:update:dist && git add CHANGELOG.mkd dist"},"dependencies":{},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.14","@typescript-eslint/eslint-plugin":"^4.0.1","@typescript-eslint/parser":"^4.0.1","ava":"^1.4.1","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^6.0.5","cspell":"^4.1.2","eslint":"^7.11.0","eslint-config-prettier":"^6.11.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.0.2","eslint-plugin-import":"^2.22.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":"^6.0.1","prettier":"^2.1.1","remark-cli":"^9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-recommended":"^5.0.0","rimraf":"^3.0.2","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.13.1","typescript":"^4.1.3"},"optionalDependencies":{},"ava":{"typescript":{"rewritePaths":{"src/":"build/cjs+tests/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"prettier # overrides/[*.markdown]/tabWidth":"// set to 4 when https://github.com/prettier/prettier/issues/5019 is fixed","prettier":{"printWidth":100,"singleQuote":true,"useTabs":true,"tabWidth":2,"overrides":[{"files":["*.md","*.mkd","*.markdown"],"options":{"tabWidth":2,"useTabs":false}}]},"tsd":{"directory":"test"},"gitHead":"e04fdaccb5b1d1a6e6448ac8e6aed797c351132c","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@5.0.0","_nodeVersion":"12.20.0","_npmVersion":"6.14.8","dist":{"shasum":"a4647c30298c04c5c1504caef3d86a75b90c9430","size":16707,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-5.0.0.tgz","integrity":"sha512-gdtFflFeFD+Hm/mGynE+WUhVee5fNB4pwF346VpiyQuUpCbwaZodor9ZqV0wAMw9UAJ2q+npI2Iw9W8HwS8akQ=="},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_5.0.0_1609138050672_0.0067742204753247215"},"_hasShrinkwrap":false,"publish_time":1609138050922,"_cnpm_publish_time":1609138050922,"_cnpmcore_publish_time":"2021-12-17T11:19:26.035Z"},"4.4.0":{"name":"os-paths","version":"4.4.0","description":"Generate portable common OS paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 6.0"},"main":"src/lib/index.js","types":"src/lib/index.d.ts","keywords":["common","cross-platform","directory","environment","linux","mac","macos","node6","osx","path","paths","portable","unix","windows"],"scripts":{"# coverage # calcuate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent _:max-node-8 && echo-cli \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s _:coverage","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix `ESLint` issues":"","fix:lint":"eslint . --fix","# fix:style # fix `Prettier` formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","# lint # check for package code 'lint'":"","lint":"run-s --silent _:max-node-8 && echo-cli \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p lint:*","# lint:lint # check for code 'lint' (using `ESLint`)":"","lint:lint":"eslint .","# lint:spell # check for spelling errors (using `cSpell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary","# lint:style # check for format imperfections (using `Prettier`)":"","lint:style":"prettier . --list-different","# lint:types # check for type declaration errors (using `tsd`)":"","lint:types":"tsd","# test # test package":"","test":"run-s lint && run-p test:*","# test:code # test package code":"","test:code":"nyc --silent ava","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && echo-cli \"[update] info CHANGELOG updated\"","_:coverage":"is-ci && run-s cov:send || run-s cov:view","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || (echo-cli \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1)","_:max-node-8":"is-node-not-modern 10","_:min-node-10":"is-node-modern 10","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || (echo-cli \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1)","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || (echo-cli \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1)","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || echo-cli \"[update] info CHANGELOG not updated\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || echo-cli \"[version] WARN CHANGELOG not updated\" 1>&2","prepublishOnly":"run-s update:* test _:vcs-strictly-clean-err","preversion":"run-s test","version":"run-s _:version:update:changelog lint:spell && git add CHANGELOG.mkd"},"dependencies":{},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"ava":"^1.4.1","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^6.0.5","cspell":"^4.1.2","echo-cli":"^1.0.8","eslint":"^7.11.0","eslint-config-prettier":"^6.11.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-import":"^2.22.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^14.1.1","open-cli":"^6.0.1","prettier":"^2.1.1","tsd":"^0.13.1"},"optionalDependencies":{},"prettier # overrides/[*.markdown]/tabWidth":"// set to 4 when https://github.com/prettier/prettier/issues/5019 is fixed","prettier":{"printWidth":100,"singleQuote":true,"useTabs":true,"tabWidth":2,"overrides":[{"files":["*.md","*.mkd","*.markdown"],"options":{"tabWidth":2,"useTabs":false}}]},"tsd":{"directory":"test"},"gitHead":"94280ad6e846e1abaa8569cca23841069e6d5eea","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@4.4.0","_nodeVersion":"10.23.0","_npmVersion":"6.14.8","dist":{"shasum":"2908b5bcb60cbfe3afb869292281a2a6b2f77ebe","size":11161,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-4.4.0.tgz","integrity":"sha512-wrAwOeXp1RRMFfQY8Sy7VaGVmPocaLwSFOYCGKSyo8qmJ+/yaafCl5BCA1IQZWqFSRBrKDYFeR9d/VyQzfH/jg=="},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_4.4.0_1608094777187_0.37334418853935825"},"_hasShrinkwrap":false,"publish_time":1608094777386,"_cnpm_publish_time":1608094777386,"_cnpmcore_publish_time":"2021-12-17T11:19:26.264Z"},"4.3.0":{"name":"os-paths","version":"4.3.0","description":"Generate portable common OS paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 6.0"},"main":"src/lib/index.js","types":"src/lib/index.d.ts","keywords":["common","cross-platform","directory","environment","linux","mac","macos","nix","node6","osx","path","paths","portable","unix","windows"],"scripts":{"# coverage # calcuate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent _:max-node-8 && echo-cli \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s _:coverage","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix `ESLint` issues":"","fix:lint":"eslint . --fix","# fix:style # fix `Prettier` formatting issues":"","fix:style":"prettier . --write","# help # display help":"","help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","# lint # check for package code 'lint'":"","lint":"run-s --silent _:max-node-8 && echo-cli \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p lint:*","# lint:lint # check for code 'lint' (using `ESLint`)":"","lint:lint":"eslint .","# lint:spell # check for spelling errors (using `cSpell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary","# lint:style # check for format imperfections (using `Prettier`)":"","lint:style":"prettier . --list-different","# lint:types # check for type declaration errors (using `tsd`)":"","lint:types":"tsd","# test # test package":"","test":"run-s lint && run-p test:*","# test:code # test package code":"","test:code":"nyc --silent ava","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && echo-cli \"[update] info CHANGELOG updated\"","_:coverage":"is-ci && run-s cov:send || run-s cov:view","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || (echo-cli \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1)","_:max-node-8":"is-node-not-modern 10","_:min-node-10":"is-node-modern 10","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || (echo-cli \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1)","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || (echo-cli \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1)","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || echo-cli \"[update] info CHANGELOG not updated\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || echo-cli \"[version] WARN CHANGELOG not updated\" 1>&2","prepublishOnly":"run-s update:* test _:vcs-strictly-clean-err","preversion":"run-s test","version":"run-s _:version:update:changelog lint:spell && git add CHANGELOG.mkd"},"dependencies":{},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"ava":"^1.4.1","codecov":"^3.5.0","command-exists":"^1.2.9","coveralls":"^3.0.5","cross-spawn":"^6.0.5","cspell":"^4.1.2","echo-cli":"^1.0.8","eslint":"^7.11.0","eslint-config-prettier":"^6.11.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-import":"^2.22.0","is-ci":"^2.0.0","is-node-modern":"^1.0.0","lodash":"^4.17.15","npm-run-all":"^4.1.5","nyc":"^14.1.1","open-cli":"^6.0.1","prettier":"^2.1.1","tsd":"^0.13.1","util":"^0.12.1"},"optionalDependencies":{},"prettier # overrides/[*.markdown]/tabWidth":"// set to 4 when https://github.com/prettier/prettier/issues/5019 is fixed","prettier":{"printWidth":100,"singleQuote":true,"useTabs":true,"tabWidth":2,"overrides":[{"files":["*.md","*.mkd","*.markdown"],"options":{"tabWidth":2,"useTabs":false}}]},"tsd":{"directory":"test"},"gitHead":"5995b812cb200342ab1ca11f83a91e091779ef57","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@4.3.0","_nodeVersion":"10.23.0","_npmVersion":"6.14.8","dist":{"shasum":"e8088ce04d1d37ea11a00e3ac3e6089e62f2ea60","size":10253,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-4.3.0.tgz","integrity":"sha512-1yOjewmd0NTrqeJmx2GFMu+qpVRdvF/nmz2opoqLlEjyLLPHnkmqlxIhNLoAB4nUrtk0izBiDQvJd9rezKFuwQ=="},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_4.3.0_1607923301165_0.2204899998829457"},"_hasShrinkwrap":false,"publish_time":1607923301330,"_cnpm_publish_time":1607923301330,"_cnpmcore_publish_time":"2021-12-17T11:19:26.485Z"},"4.2.0":{"name":"os-paths","version":"4.2.0","description":"Generate portable common OS paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 6.0.0"},"scripts":{"coverage":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","coverage:local":"nyc report --reporter=html","lint":"run-p lint:*","lint:spell":"run-s -s _:min-node-8 _:spellcheck || run-s -s _:max-node-6 _:spellcheck-warn","lint:style":"xo","prepublishOnly":"npm run test","pretest":"npm run lint","test":"run-p test:*","test:code":"nyc --silent ava","test:types":"tsd","_:min-node-8":"is-node-modern 8","_:max-node-6":"is-node-not-modern 8","_:spellcheck":"cspell *.js *.ts readme.md --no-summary","_:spellcheck-warn":"echo-cli \"lint:spell WARN Spell-check skipped [for NodeJS < v8]\""},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","nix","node6","osx","path","paths","portable","unix","windows"],"devDependencies":{"ava":"^1.4.1","codecov":"^3.5.0","coveralls":"^3.0.5","cspell":"^3.2.14","echo-cli":"^1.0.8","eslint":"^5.16.0","is-node-modern":"^1.0.0","lodash":"^4.17.15","npm-run-all":"^4.1.5","nyc":"^14.1.1","tsd":"^0.7.1","util":"^0.12.1","xo":"^0.24.0"},"gitHead":"8e211bb45f9d80008354eb0a0bf0247bed3f1bbf","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@4.2.0","_nodeVersion":"10.16.3","_npmVersion":"6.11.2","dist":{"shasum":"9fc5209d76c5859e581e30832d5287341df01059","size":6694,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-4.2.0.tgz","integrity":"sha512-EH766lvboIFLggwsdUxyCnNJLGRvG4v58Om37WYK9rCUMk1FP6DoMSqOlsrcs0oibgmpsSQ6+TJHJ9VQI6qCIg=="},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_4.2.0_1571333952525_0.019005443626500806"},"_hasShrinkwrap":false,"publish_time":1571333952671,"_cnpm_publish_time":1571333952671,"_cnpmcore_publish_time":"2021-12-17T11:19:26.685Z"},"4.1.0":{"name":"os-paths","version":"4.1.0","description":"Generate portable basic OS paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=6"},"scripts":{"coverage":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","lint":"run-p lint:*","lint:spell":"run-s -s _:min-node-8 _:spellcheck || run-s -s _:max-node-6 _:spellcheck-warn","lint:style":"xo","pretest":"npm run lint","test":"run-p test:*","test:code":"nyc --silent ava","test:types":"tsd","_:min-node-8":"is-node-modern 8","_:max-node-6":"is-node-not-modern 8","_:spellcheck":"cspell *.js *.ts readme.md --no-summary","_:spellcheck-warn":"echo-cli \"lint:spell WARN Spell-check skipped [for NodeJS < v8]\""},"keywords":["common","cross-platform","directory","env","environment","linux","mac","macos","osx","path","paths","portable","unix","windows"],"devDependencies":{"ava":"^1.4.1","codecov":"^3.5.0","coveralls":"^3.0.5","cspell":"^3.2.14","echo-cli":"^1.0.8","eslint":"^5.16.0","is-node-modern":"^1.0.0","lodash":"^4.17.15","npm-run-all":"^4.1.5","nyc":"^14.1.1","tsd":"^0.7.1","util":"^0.12.1","xo":"^0.24.0"},"gitHead":"41fc9d1eee15eaf0455fe02d41c53735696ba3a8","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@4.1.0","_nodeVersion":"8.11.2","_npmVersion":"6.11.3","dist":{"shasum":"4cf7c5250dec985d188de100339ba92a3ccea925","size":6207,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-4.1.0.tgz","integrity":"sha512-8u0DG9DoKl+B/lzv6Nfdn2aK/jTRH2m6HPQuaqmRAqeVDyAL9kbyvnFH5kxqiYLfdK0utJiAxdeExOuazYGXKQ=="},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_4.1.0_1570219203489_0.8017297927016598"},"_hasShrinkwrap":false,"publish_time":1570219203731,"_cnpm_publish_time":1570219203731,"_cnpmcore_publish_time":"2021-12-17T11:19:26.946Z"},"4.0.1":{"name":"os-paths","version":"4.0.1","description":"Generate portable basic OS paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=6"},"scripts":{"coverage":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","lint":"run-p lint:*","lint:spell":"run-s -s _:min-node-8 _:spellcheck || run-s -s _:max-node-6 _:spellcheck-warn","lint:style":"xo","pretest":"npm run lint","test":"run-p test:*","test:code":"nyc --silent ava","test:types":"tsd","_:min-node-8":"is-node-modern 8","_:max-node-6":"is-node-not-modern 8","_:spellcheck":"cspell *.js *.ts readme.md --no-summary","_:spellcheck-warn":"echo-cli \"lint:spell WARN Spell-check skipped [for NodeJS < v8]\""},"keywords":["common","cross-platform","directory","env","environment","linux","mac","macos","osx","path","paths","portable","unix","windows"],"devDependencies":{"ava":"^1.4.1","codecov":"^3.5.0","cspell":"^4.0.30","echo-cli":"^1.0.8","eslint":"^5.16.0","is-node-modern":"^1.0.0","lodash":"^4.17.15","npm-run-all":"^4.1.5","nyc":"^14.1.1","tsd":"^0.7.1","util":"^0.12.1","xo":"^0.24.0"},"gitHead":"a19f37cfcfbfb6d788887e651ecf449fefd2e33f","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@4.0.1","_nodeVersion":"8.11.2","_npmVersion":"6.11.3","dist":{"shasum":"b75483a47e2a4e000a7e9dce1ea5fa20915dd2c5","size":6020,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-4.0.1.tgz","integrity":"sha512-GL41Jqzi3pW9bWtD8pNX+8Xb7F702oVBXegoGcPD7bntCdAhU7scQV/RFho0q9yMAIlMmNcV8sj2Y5zDpSbgRA=="},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_4.0.1_1570202777421_0.2944512405422126"},"_hasShrinkwrap":false,"publish_time":1570202777532,"_cnpm_publish_time":1570202777532,"_cnpmcore_publish_time":"2021-12-17T11:19:27.164Z"},"4.0.0":{"name":"os-paths","version":"4.0.0","description":"Generate portable basic OS paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=6"},"scripts":{"coverage":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","lint":"run-p lint:*","lint:spell":"run-s -s _:min-node-8 _:spellcheck || run-s -s _:max-node-6 _:spellcheck-warn","lint:style":"xo","pretest":"npm run lint","test":"run-p test:*","test:code":"nyc --silent ava","test:types":"tsd","_:min-node-8":"is-node-modern 8","_:max-node-6":"is-node-not-modern 8","_:spellcheck":"cspell *.js *.ts readme.md --no-summary","_:spellcheck-warn":"echo-cli \"lint:spell WARN Spell-check skipped [for NodeJS < v8]\""},"keywords":["common","cross-platform","directory","env","environment","linux","mac","macos","osx","path","paths","portable","unix","windows"],"devDependencies":{"ava":"^1.4.1","codecov":"^3.5.0","cspell":"^4.0.30","echo-cli":"^1.0.8","eslint":"^5.16.0","is-node-modern":"^1.0.0","lodash":"^4.17.15","npm-run-all":"^4.1.5","nyc":"^14.1.1","tsd":"^0.7.1","util":"^0.12.1","xo":"^0.24.0"},"gitHead":"aa966af7e55acdecbee8dc61676524ffcdcecd0e","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@4.0.0","_nodeVersion":"8.11.2","_npmVersion":"6.11.3","dist":{"shasum":"5c8b8b3d086bc14c47a782e5a785517e12dc1883","size":5910,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-4.0.0.tgz","integrity":"sha512-1DuWIMgGK0wU4bNE+S8O4IeyTTLQ0gH2FvrrcEnShXzS6eFWmeUwLPl40GozDgCdTkZ82eVTo431mC+tvhbIQg=="},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_4.0.0_1570201969930_0.8122724093590228"},"_hasShrinkwrap":false,"publish_time":1570201970044,"_cnpm_publish_time":1570201970044,"_cnpmcore_publish_time":"2021-12-17T11:19:27.389Z"},"3.0.2":{"name":"os-paths","version":"3.0.2","description":"Generate portable (and XDG-compatible) paths for storing cache, config, data, etc","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=6"},"scripts":{"test":"xo && ava && tsd"},"keywords":["appdir","cache","common","config","data","dir","directory","env","environment","linux","logs","path","paths","temp","unix","user","windows","xdg"],"devDependencies":{"ava":"^1.4.1","tsd":"^0.7.1","xo":"^0.24.0"},"gitHead":"1696b462d336a047b5041685b4fade914eeebd6a","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@3.0.2","_nodeVersion":"10.15.3","_npmVersion":"6.9.2","dist":{"shasum":"2b7ba3780de8c1ddaff93f9644ac2749d035df6a","size":3660,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-3.0.2.tgz","integrity":"sha512-8DRVh4XD9wbgAJmMK7aOHO0ikyI1Ifs19gOZktoAXuBhZEyXuBCFVWQjA4WcQXmAgoloz2Ogwyi2kF0yUm+vkA=="},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_3.0.2_1561827827197_0.2796752330772321"},"_hasShrinkwrap":false,"publish_time":1561827827312,"_cnpm_publish_time":1561827827312,"_cnpmcore_publish_time":"2021-12-17T11:19:27.608Z"},"3.0.1":{"name":"os-paths","version":"3.0.1","description":"Generate portable (and XDG-compatible) paths for storing cache, config, data, etc","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=6"},"scripts":{"test":"xo && ava && tsd"},"keywords":["common","user","paths","env","environment","directory","dir","appdir","path","data","config","cache","logs","temp","linux","unix","windows"],"devDependencies":{"ava":"^1.4.1","tsd":"^0.7.1","xo":"^0.24.0"},"gitHead":"dab0324f2302eb87a7631044c4a997b935583dcd","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@3.0.1","_nodeVersion":"10.15.3","_npmVersion":"6.9.2","dist":{"shasum":"aaa0fa21df7b5c75e6cdab8d0d92a9573a83eff9","size":3583,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-3.0.1.tgz","integrity":"sha512-EAM3Z3aslD1Eot46Z0VX1zORkkrsXqb8JNXgJ2CTOSr62uVGmMbsFQ0UkiUQVxyDND0aCiOrC8sJIJiRiCsdUw=="},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_3.0.1_1561825591582_0.6656240612356219"},"_hasShrinkwrap":false,"publish_time":1561825591756,"_cnpm_publish_time":1561825591756,"_cnpmcore_publish_time":"2021-12-17T11:19:27.860Z"},"3.0.0":{"name":"os-paths","version":"3.0.0","description":"Generate portable (and XDG-compatible) paths for storing cache, config, data, etc","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">=6"},"scripts":{"test":"xo && ava && tsd"},"keywords":["common","user","paths","env","environment","directory","dir","appdir","path","data","config","cache","logs","temp","linux","unix","windows"],"devDependencies":{"ava":"^1.4.1","tsd":"^0.7.1","xo":"^0.24.0"},"gitHead":"0fbe06c95064e9920ecac11959f6af3b9811d8b5","bugs":{"url":"https://github.com/rivy/os-paths/issues"},"homepage":"https://github.com/rivy/os-paths#readme","_id":"os-paths@3.0.0","_nodeVersion":"10.15.3","_npmVersion":"6.9.0","dist":{"shasum":"c5621f02c7f32220b9944554b43fd92264a4364f","size":3240,"noattachment":false,"tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-3.0.0.tgz","integrity":"sha512-eTwmLmP6IEDxySxxhH+dxMAM/+0dNJzueB0sssoHvsqYgchjT0m+rsvhiTG+2QzYmtW315bjViK5sw9qEowUCA=="},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_3.0.0_1561348159406_0.6002250027604465"},"_hasShrinkwrap":false,"publish_time":1561348159504,"_cnpm_publish_time":1561348159504,"_cnpmcore_publish_time":"2021-12-17T11:19:28.060Z"},"7.0.0":{"name":"os-paths","version":"7.0.0","description":"Determine common OS/platform paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:lab":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-lab.succeeded \"run-s -n rebuild:lab\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write --list-different","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -config .ecrc.JS.json","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --check --loglevel warn","# prerelease # clean, rebuild, and fully test (useful prior to publish/release)":"","prerelease":"run-s clean verify","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","# rebuild:all # clean and fully reconstruct project distribution":"","rebuild:all":"run-s clean build update","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:lab":"shx rm -fr build/lab && tsc -p tsconfig/tsconfig.lab.json && shx mkdir -p build/.targets && shx touch build/.targets/build-lab.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && cross-env-shell ava $npm_config_ava || ( run-s --silent +:min-node-10 && cross-env-shell nyc --silent ava $npm_config_ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target build/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","# verify # fully (and verbosely) test package":"","verify":"cross-env npm_config_test_dist=true npm_config_ava=--verbose run-s test","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.npm_config_dry_run; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && replace-in-file \"export { _default as default }\" \"export = _default\" dist/types/mod.cjs.d.ts --quiet && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch build/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"npm run clean && cross-env npm_config_test_dist=true npm run test && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && cross-env npm_config_test_dist=true npm run test","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"fsevents":"*"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","cross-env":"^7.0.3","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"https://cdn.jsdelivr.net/gh/rivy/js-cli.exec-if-updated@2.2.0/dist/pkg/exec-if-updated.tgz","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":">=6.0 <7.0","prettier":"^2.1.1","remark-cli":"=9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","replace-in-file":"=6.3.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"~4.2.0","unified":"^9.2.0"},"optionalDependencies:#":"* 'fsevents' included to avoid `npm ci` errors with early npm versions; ref: <https://github.com/bahmutov/npm-install/issues/103>","optionalDependencies":{"fsevents":"*"},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/lab/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["build/cjs/**","build/esm/**","build/umd/**","eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"e1b60de4a72389573a5e4fdec2194cd4fa3294d8","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@7.0.0","_nodeVersion":"12.20.2","_npmVersion":"6.14.11","dist":{"integrity":"sha512-YL9gbV3cm4epufKXK+o0ACy1GKmRL0aYPMcRjGkRUFB5ko1t8he9Tmp0GkrvvHau7sKG2vP/KsGFY3pL+hpa+g==","shasum":"8d73cb082e029b148c3d358e07fab97d704f8399","tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-7.0.0.tgz","fileCount":14,"unpackedSize":117856,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCPuqZpntK5WdfZlz8wuvH151btjfsiYMay9UmNqj6hRAIhAMZn72hV9M3EbUVqZSSvw1hSbrJ3gPi37xUtJ2ub0Np5"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi51HEACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqkqBAAgPZN2J02S/DKF3UFNZ8z+frmUdEZO2MDJKbhjBPLtFJ9zw8r\r\n+SqMXp/jEvZWFLMSLdgQ6RLp22xSphZUdbOJTbUzTlXGo3mlYjjAJhDVHs4+\r\n/zs47q/NEGoOcKCEL6mFkMoDLyKf9ZlDlYJVhZy/9Q153leqZcwBS3fGce5e\r\nn3wsO/Fv45P1IG7QPpJ4+4s2N2UZMk+sOWj7rWrsk200gOW6kyb/88K/mww4\r\nzlQshK97ZIfaphBZnBnyqiLvzSK7vNLJBhgCEUi3VWocAG/KokbUJ1oAr8O+\r\n3jHKhBhF8fZ8sw54B3ALFuv1+9M06GKViYiTszXpb63U0ro3hTtrDYbstXbf\r\n3pShGM70pcmB0Bsvvo5TZtvLWLbCBNi/1AtDPgEU3lE8eQIJI9gpGPAkJ/1w\r\n/x7XNdTHKeYUS5LCDmTaslTvuaGrt/+1BWRrqxvWe0K+9iqpWvimEhPoPdrn\r\nUVkONhU72Ofy8fYw2GniwPHoWbKrhrFLsCXbK5AsYI7y1TMISufJfIIZxd0v\r\nl66dBEVqspXsP5FMAam3gW5pSrJf0Vc4MfjoSmomRHy87SILmTrqt5qh7S78\r\nTODcfTMYKH/FSa652Pyz+b4jxjpb+4ja+n+GSh4cgqX27RDx6JzhG+eS7KVV\r\nx+KBa0OnVcmwfXG3XENOUpGMVQ+cyi/XA9c=\r\n=5NjA\r\n-----END PGP SIGNATURE-----\r\n","size":35640},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_7.0.0_1659326916088_0.9273077661967541"},"_hasShrinkwrap":false,"_cnpmcore_publish_time":"2022-08-01T04:08:45.457Z"},"7.1.0":{"name":"os-paths","version":"7.1.0","description":"Determine common OS/platform paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:lab":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-lab.succeeded \"run-s -n rebuild:lab\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write --list-different","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -config .ecrc.JS.json","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --check --loglevel warn","# prerelease # clean, rebuild, and fully test (useful prior to publish/release)":"","prerelease":"run-s clean verify","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","# rebuild:all # clean and fully reconstruct project distribution":"","rebuild:all":"run-s clean build update","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:lab":"shx rm -fr build/lab && tsc -p tsconfig/tsconfig.lab.json && shx cp -r src/esm-wrapper build/lab/src && shx mkdir -p build/.targets && shx touch build/.targets/build-lab.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && cross-env-shell ava $npm_config_ava || ( run-s --silent +:min-node-10 && cross-env-shell nyc --silent ava $npm_config_ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target build/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","# verify # fully (and verbosely) test package":"","verify":"cross-env npm_config_test_dist=true npm_config_ava=--verbose run-s test","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.npm_config_dry_run; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && replace-in-file \"export { _default as default }\" \"export = _default\" dist/types/mod.cjs.d.ts --quiet && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch build/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"npm run clean && cross-env npm_config_test_dist=true npm run test && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && cross-env npm_config_test_dist=true npm run test","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"fsevents":"*"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","cross-env":"^7.0.3","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"https://cdn.jsdelivr.net/gh/rivy/js-cli.exec-if-updated@2.2.0/dist/pkg/exec-if-updated.tgz","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":">=6.0 <7.0","prettier":"^2.1.1","remark-cli":"=9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","replace-in-file":"=6.3.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"~4.2.0","unified":"^9.2.0"},"optionalDependencies:#":"* 'fsevents' included to avoid `npm ci` errors with early npm versions; ref: <https://github.com/bahmutov/npm-install/issues/103>","optionalDependencies":{"fsevents":"*"},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/lab/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["build/cjs/**","build/esm/**","build/umd/**","eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"baba62f0bcff95751cb3f0067798dd3a418af4c1","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@7.1.0","_nodeVersion":"12.20.2","_npmVersion":"6.14.11","dist":{"integrity":"sha512-1Hy1HYTqCStLbRpeRxBlxB9wYY56jx1E0RiO1Of//iZ8KTjTNuF7br3Eay9/tr52Hv7YyipyU32sZqYNba2DUQ==","shasum":"6434907a5bfb6b78863b369863b165167dea594e","tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-7.1.0.tgz","fileCount":14,"unpackedSize":118956,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCxIwH9oR9s3Dys7UXyOrk8Mf9lBboKSmJEjDAzU+HkmgIhAJ92vMkuX/qORcga7CrQ6z0Krqc8f9VTxNCb35uSGHTC"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi7r3KACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpurA//fJNfbtjy5SEs3qNR3VEbyeNcK8oJdpXzYU1BB5P2C762e+k4\r\nBan7kRAYE2kKtPDjr2Dfeb4mqHxRcy3lzmNgJhR8j4ICmA0WWGzHTt/rqLOz\r\npghUP23A+KHIJXD8QpuKXhzmSOb5ipx42Oy+uPX/kDEMeZ0nHk1ZXx39wXQs\r\nORy5GaUCWOZVpVugR87Ggj0XRsOKtSRNZ1vYAMpYTuF4HxzSyXbFBtydel+Q\r\nJUekp8pWkh1T1ygi7DwhqoLvs2pZu3a4HHHa0SAbwQm3KZ4OnUpSl6G2u+FF\r\nZfh9TaGb8HrMXP1cQFT9TM9E1OzAXMV9qcl8mHYP8pjy7B/imxhTTye5q+hS\r\nsiT3vyXnC6IrF2BWkMIO28bfebs5ccHDoxVzW6+/U7IKEieTmz3pbyjQhcps\r\nJVstcalibSgCvhOz/zhwpW1qQ9NhC7qlk530Q4Aw8bUcSqqRUAaOimzAUyc6\r\n0dhXnbIj4mrSqxjirzX/HJSJlMDzf4j9oTRWaYvcTPWa8ImMbjXTUpGAGvb9\r\no9Kr5pnHiLlrKZ4wb/darZvGs7aIuu8VkWhIy0rLhIFni6vBrj1hsX4OeRyC\r\nErOYXXP110HisNGpeOhd1U3Bs7qeFgyyWj4le6vU2t5cUpzHmImL83GngNwt\r\nAELnLYOhwCWFM3NMH+XwRF5Ue/bo5SkbkQM=\r\n=46vC\r\n-----END PGP SIGNATURE-----\r\n","size":35915},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_7.1.0_1659813321917_0.27861280525711485"},"_hasShrinkwrap":false,"_cnpmcore_publish_time":"2022-08-06T19:15:27.052Z"},"7.1.1":{"name":"os-paths","version":"7.1.1","description":"Determine common OS/platform paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:lab":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-lab.succeeded \"run-s -n rebuild:lab\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write --list-different","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -config .ecrc.JS.json","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --check --loglevel warn","# prerelease # clean, rebuild, and fully test (useful prior to publish/release)":"","prerelease":"run-s clean update verify","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","# rebuild:all # clean and fully reconstruct project distribution":"","rebuild:all":"run-s clean build update","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:lab":"shx rm -fr build/lab && tsc -p tsconfig/tsconfig.lab.json && shx cp -r src/esm-wrapper build/lab/src && shx mkdir -p build/.targets && shx touch build/.targets/build-lab.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && cross-env-shell ava $npm_config_ava || ( run-s --silent +:min-node-10 && cross-env-shell nyc --silent ava $npm_config_ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target build/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","# verify # fully (and verbosely) test package":"","verify":"cross-env npm_config_test_dist=true npm_config_ava=--verbose run-s test","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.npm_config_dry_run; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && replace-in-file \"export { _default as default }\" \"export = _default\" dist/types/mod.cjs.d.ts --quiet && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch build/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"run-s clean update && cross-env npm_config_test_dist=true npm run test && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && cross-env npm_config_test_dist=true npm run test","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"fsevents":"*"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","cross-env":"^7.0.3","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"https://cdn.jsdelivr.net/gh/rivy/js-cli.exec-if-updated@2.2.0/dist/pkg/exec-if-updated.tgz","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":">=6.0 <7.0","prettier":"^2.1.1","remark-cli":"=9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","replace-in-file":"=6.3.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"~4.2.0","unified":"^9.2.0"},"optionalDependencies:#":"* 'fsevents' included to avoid `npm ci` errors with early npm versions; ref: <https://github.com/bahmutov/npm-install/issues/103>","optionalDependencies":{"fsevents":"*"},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/lab/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["build/cjs/**","build/esm/**","build/umd/**","eg/**","test/**","**/*.spec.js","**/*.test.js","**/*.spec.ts","**/*.test.ts"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"42e5730efbbb61687905a746d525b0b4c1b02358","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@7.1.1","_nodeVersion":"12.20.2","_npmVersion":"6.14.11","dist":{"integrity":"sha512-FR4OqSH/YLOa6gbcBgYRbETonNoXHO6rlkLc07SuLq5J8ZTPY9hCbbOPJep6/g8ZMULfaO7DAAGSzKbVYOo5cA==","shasum":"670612631275f8cf33900069aaad55480afab384","tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-7.1.1.tgz","fileCount":14,"unpackedSize":119683,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCUF6Lz8iNIWWyJMgkxcFNTTQejRl7McrpZbaoNpZ3LpAIgeFgx6IKiSMh14fvPqrT8XaBY9l4b/rqjzYZigeaY7CQ="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi7s2QACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmptNw/+JlaCVxl/R2mQvAp5YFIOZmEHvxMjyfi9cZg28BDnpoM+cJmg\r\nna2f0pn9pYaDBdEBp0pwBverhX98Rh4tkTccp/xNlAG4LmkKCpJ+JUHtlEuF\r\nH61x11OMvLn9zF68iqLOGw8HNbfmSTBUFS/eHUNjee8TM1iVBCOUTvzAQgZk\r\n728G/2XqtZJXhoCKiQuC0GHEQGJ72CBHdLbOUX+dX4uygRedwZpkjFYa/qAu\r\nEuhvf41KtoG5+oC+sH5sQUl8VhJilPIzYFh7n5sejm5JnnLeOZa9xC4CTlVa\r\n5Ux78rGn6QOnQqycRtMzKCx5X4AHSZMGZS/ZWvU8CRYw6w8Wb8ZInlggPdTC\r\n6Ag053j/P6P3FYwQrPDDBU4gOyy2qh48NVT54NHjYsdt8vglihoUomb6PwvS\r\ntn79TInQ8g8ahmRv75JR2cAOpMKu8FEseBOPbk+NT9goPWGNffrWBzNxbLM3\r\ngTa5WhrAvhPi6kt44AzNiYyNgMcoupEIC/QclMtuafkJ7yHmywmVPb1WzKf8\r\ncSArtzqnvgFJMDuqZmQfqUqt88Y/6nmPOYNBu1X1SP/oiPj8Q91rc8vP82+N\r\nR1z6mxpMDe8r12uhJMHKROymS6bxOgdYvmZsTM6CGDiQtD3ctXbBNyPeHdDh\r\nOhCN07BxbQBmHcXRPpDKqxYcEWqLKkAKfAs=\r\n=3/51\r\n-----END PGP SIGNATURE-----\r\n","size":36077},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_7.1.1_1659817360662_0.7866084521727403"},"_hasShrinkwrap":false,"_cnpmcore_publish_time":"2022-08-06T20:22:44.722Z"},"7.2.0":{"name":"os-paths","version":"7.2.0","description":"Determine common OS/platform paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:lab":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-lab.succeeded \"run-s -n rebuild:lab\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","cov:send":"nyc report --reporter=text-lcov | codecov --disable=gcov --pipe","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write --list-different","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-s --silent _:v_tag:missing || run-p --silent \"_:lint:commits.new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -config .ecrc.JS.json","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --check --loglevel warn","# prerelease # clean, rebuild, and fully test (useful prior to publish/release)":"","prerelease":"run-s clean update verify","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:all":"run-s clean build update","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:lab":"shx rm -fr build/lab && tsc -p tsconfig/tsconfig.lab.json && shx cp -r src/esm-wrapper build/lab/src && shx mkdir -p build/.targets && shx touch build/.targets/build-lab.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# refresh # clean and rebuild/regenerate all project artifacts":"","refresh":"run-s rebuild:all","# refresh:dist # clean, rebuild, and regenerate project distribution":"","refresh:dist":"run-s rebuild update:dist","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code":"","test:code":"run-s --silent +:max-node-8 && cross-env-shell ava $npm_config_ava || ( run-s --silent +:min-node-10 && cross-env-shell nyc --silent ava $npm_config_ava )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target build/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","# verify # fully (and verbosely) test package":"","verify":"cross-env npm_config_test_dist=true npm_config_ava=--verbose run-s test","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:\\W+\\s*)([^#\\x22]+)\\s+#+\\s+([^#\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits.all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:commitlint":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:lint:commits.new:spell":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git log v'+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:v_tag:exists":"node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git rev-list refs/tags/v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[lint] WARN Missing commit tag v'+v); process.exit(1);}\"","_:v_tag:missing":"run-s --silent _:v_tag:exists && exit 1 || exit 0","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.npm_config_dry_run; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && replace-in-file \"export { _default as default }\" \"export = _default\" dist/types/mod.cjs.d.ts --quiet && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch build/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"run-s clean update && cross-env npm_config_test_dist=true npm run test && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && cross-env npm_config_test_dist=true npm run test","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"fsevents":"*"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","cross-env":"^7.0.3","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"https://cdn.jsdelivr.net/gh/rivy/js-cli.exec-if-updated@2.2.0/dist/pkg/exec-if-updated.tgz","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":">=6.0 <7.0","prettier":"^2.1.1","remark-cli":"=9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","replace-in-file":"=6.3.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"~4.2.0","unified":"^9.2.0"},"optionalDependencies:#":"* 'fsevents' included to avoid `npm ci` errors with early npm versions; ref: <https://github.com/bahmutov/npm-install/issues/103>","optionalDependencies":{"fsevents":"*"},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/lab/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["build/cjs/**","build/esm/**","build/umd/**","dist/**","eg/**","test/**","**/*.test.*","**/*.spec.*"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"3abd0d99c4ccadd053f06768afab91c092651c56","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@7.2.0","_nodeVersion":"12.20.2","_npmVersion":"6.14.11","dist":{"integrity":"sha512-FxE5NEvoA4rajdvUjW59B1hYqb7eAW3J9XZvZzr2hH1V8yTBDZD3mzEuNlz7VvBy7Sop/iPnm+N2aYVBVHhN6g==","shasum":"b71374ecb870ef9021b11b763cd52b96e80bca23","tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-7.2.0.tgz","fileCount":14,"unpackedSize":121964,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICdz4v/XVFRSzc8YyhJbzSLrvB+XBYPEx5QLAYB5hTDJAiEA5kh/UlqGaUPh8bDg95HemfnkIhnCv1drIWB09GwzM54="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi8tHTACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqJthAAo6usWrFliflwKGdgh7FMh2QL1qhphl31rYsAYwDj16dJVXt/\r\n+03+rMrCvUVxzoYNfbqLN3yJE9V3FHLK2EZoPXZArC46/wSJVAa6202lBMOV\r\nocUspKKxNSUK88qB7/53B/DzbbRcD/T/Vxt7UmQsRjj7ZoItTKl//ZURhd+y\r\nGm+88i4OreQp4Ci3KNkNBzaEP6h/mCxtYnTxh284Vej5AeaMf8fF/OEgqbti\r\nHXrL+RwaFfOpWFTILCCMdafdg4Pemy8Ex+HCy9I/FSY1sn6sPU/rvtL+OCG0\r\nHscQI4o3Jagr1CufiDcHWRlFnTguKwmUtWHRhd1QnCnreXXb69mcsoYje81J\r\nHwkQQRvzRsCqu0d7ixdTyMZBGB3XXHakJkeAWcRP/2XTUfGb6kliTMCSYRlM\r\nPx/I3Z8l8gxl4PKwKGs3ESp01OTbSYK6B/jeoCp9eluh+g7K3uPPhV0ALcof\r\nXt7NqeVU3Q4U5Pz5UEvgdy3fsO0dGolfUx7fKWUGhQt3OsRwyww/PdBY+cyz\r\nXTYqTx5uRccTYH5iWdunU5EVbL7GGdvqSfj9yhRpV2HE1cbPJB0nGy4rot1/\r\nEInQcKkTU2IiLNNePu+P3AJmqPPmeaydPbMqsKAWYm4uDhHhpyqKaXBVVHYS\r\ncEwMH8lAmQEeVSHttzcE1f9JOlsV72nfw+0=\r\n=ZDbE\r\n-----END PGP SIGNATURE-----\r\n","size":36665},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_7.2.0_1660080595649_0.6531978877894495"},"_hasShrinkwrap":false,"_cnpmcore_publish_time":"2022-08-09T21:30:04.537Z"},"7.3.0":{"name":"os-paths","version":"7.3.0","description":"Determine common OS/platform paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:lab":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-lab.succeeded \"run-s -n rebuild:lab\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"rimraf build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html","#* cov:send # use `--cov-send=...` to pass options to coverage uploader":"","cov:send":"shx mkdir -p coverage && nyc report --reporter=text-lcov > \"coverage/@coverage.lcov\" && cross-env-shell codecov --disable=gcov --file=\"coverage/@coverage.lcov\" $npm_config_cov_send","cov:text":"nyc report","cov:view":"run-s cov:html && cd coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write --list-different","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-p --silent \"_:lint:commits:new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -config .ecrc.JS.json","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --check --loglevel warn","# prerelease # clean, rebuild, and fully test (useful prior to publish/release)":"","prerelease":"run-s clean update verify","# realclean # remove all generated files":"","realclean":"run-s clean && rimraf coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:all":"run-s clean build update","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:lab":"shx rm -fr build/lab && tsc -p tsconfig/tsconfig.lab.json && shx cp -r src/esm-wrapper build/lab/src && shx mkdir -p build/.targets && shx touch build/.targets/build-lab.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# refresh # clean and rebuild/regenerate all project artifacts":"","refresh":"run-s rebuild:all","# refresh:dist # clean, rebuild, and regenerate project distribution":"","refresh:dist":"run-s rebuild update:dist","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code (use `--test-code=...` to pass options to testing harness)":"","test:code":"run-s --silent +:max-node-8 && cross-env-shell ava $npm_config_test_code || ( run-s --silent +:min-node-10 && cross-env-shell nyc --silent ava $npm_config_test_code )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target build/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","# verify # fully (and verbosely) test package":"","verify":"cross-env npm_config_test_dist=true npm_config_test=--verbose run-s test","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && is-ci && run-s cov:send || run-s cov:view","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:debug:env":"node -e \"console.log({env: process.env})\"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","* _:help # print usage/TARGETs by matching lines containing leading double-quoted text like `# TARGET_NAME # HELP_TEXT`":"","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%susage: \\`%s run TARGET\\` or \\`npx run-s TARGET [TARGET..]\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:#\\s*)(\\w[^#\\x22]*)\\s+#+\\s+([^\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('%s %s', match[1].padEnd(19), match[2]); } });\"","_:lint:commits:all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","* _:lint:commits:new:... * note: review from 'origin/last' or tag just prior to version-sorted latest, with fallback to first commit":"","_:lint:commits:new:commitlint":"node -e \"result=require('child_process').spawnSync('( git tag --list [#v]* --contains origin/last --sort=v:refname || shx true ) && ( git describe --tags --abbrev=0 HEAD~1 || shx true ) && ( git rev-list --max-parents=0 HEAD --abbrev-commit --abbrev=16 || shx true )',{shell:true,encoding:'utf-8'}); o=result.stdout.split(/\\r?\\n/).filter((s)=>!!s); vs=o; v=vs[0]; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from '+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found (within \\'%s..HEAD\\')\\n'+result.stdout+'\\n'+result.stderr, v); process.exit(1);} else { (result.stdout.length > 0) && console.log(result.stdout);};\" || shx true","_:lint:commits:new:spell":"node -e \"result=require('child_process').spawnSync('( git tag --list [#v]* --contains origin/last --sort=v:refname || shx true ) && ( git describe --tags --abbrev=0 HEAD~1 || shx true ) && ( git rev-list --max-parents=0 HEAD --abbrev-commit --abbrev=16 || shx true )',{shell:true,encoding:'utf-8'}); o=result.stdout.split(/\\r?\\n/).filter((s)=>!!s); vs=o; v=vs[0]; result=require('child_process').spawnSync('git log '+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s) (within \\'%s..HEAD\\')\\n'+result.stdout+'\\n'+result.stderr, v); process.exit(1);} else {(result.stdout.length > 0) && console.log(result.stdout);};\" || shx true","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.npm_config_dry_run; name=require('./package.json').name; result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && replace-in-file \"export { _default as default }\" \"export = _default\" dist/types/mod.cjs.d.ts --quiet && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch build/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {require('fs').writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"run-s clean update && cross-env npm_config_test_dist=true npm run test && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && cross-env npm_config_test_dist=true npm run test","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"fsevents":"*"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","cross-env":"^7.0.3","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7.17.0","eslint-config-prettier":"^7.1.0","eslint-plugin-eslint-comments":"^3.2.0","eslint-plugin-functional":"^3.2.1","eslint-plugin-import":"^2.22.0","eslint-plugin-security":"^1.4.0","eslint-plugin-security-node":"^1.0.14","exec-if-updated":"https://cdn.jsdelivr.net/gh/rivy/js-cli.exec-if-updated@2.2.0/dist/pkg/exec-if-updated.tgz","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":">=6.0 <7.0","prettier":"^2.1.1","remark-cli":"=9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","replace-in-file":"=6.3.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rimraf":"^3.0.2","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"~4.2.0","unified":"^9.2.0"},"optionalDependencies:#":"* 'fsevents' included to avoid `npm ci` errors with early npm versions; ref: <https://github.com/bahmutov/npm-install/issues/103>","optionalDependencies":{"fsevents":"*"},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/lab/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["build/cjs/**","build/esm/**","build/umd/**","dist/**","eg/**","test/**","**/*.test.*","**/*.spec.*"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"e5c8d6c4fc32b23a01c8bb0392b0353d97b25431","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@7.3.0","_nodeVersion":"12.20.2","_npmVersion":"6.14.11","dist":{"integrity":"sha512-RwE14ySxx9W/wTYzT4F0jUlrhYHLBHVW38os8yN7I9IGmLOpI76NDSlTa7gwHhVnH0IoM6BFp++s5sI3x3dicw==","shasum":"866e783ace14bc0ce95fa812b7555b7888452b99","tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-7.3.0.tgz","fileCount":14,"unpackedSize":125575,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGYSH8pu0+mFb7y5GcFs6sSu+KQ1mJfxjTa3NQt4dLafAiATvcoRDAGoUdQaWSRaFvQw6t01Q1FARxQxqYiNkY1CrA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi+B42ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpI3Q/6A5wn972TcnwJyVF+AtPTQKmprWs7jbKJQL+Vz5aAVML6ZbE7\r\nX5Ay6vkHla/OdBkhgfOYL9K7QrWBvzONUnLxjOh3LQFe+rFwvYunfQONYvsr\r\nmV58NNbeDdJi3NNzhOPjpC23zAygz2fALCPxHudFMnnwrziitlTuXXjo0Y6r\r\nwOmGIPtm3voYq3uzQH4jBRfPz11ieXE9Zhk/HjpvlNfZgSMUw7jyJ34/+23G\r\ng6KcptLgJcDBsLYlzm50C/5ScSiSsVKhgD5LfWHIOKxjgRHAc0Fj9QhY9E2K\r\np70fPO5ovtW4oT0VuHDeLyHRmnild//1zS1ttNkO5HcIx5ELs2gMCwtkxCTx\r\nVkbnctwdriJ4gLZHGafurP4TtiXSvjBSyqwKXLDZ7IP2oZvW0CeWg5LhCCri\r\no3gj75O8d5rB647/WidldKHuS2dE7k3WdDb8OG3JjD2wcl/q+5KIr81zjBi9\r\nc5Fss0njsoY6R4h8bxSGXgxj1ICAI1cRJXrikBw1mAUW4YfbCW8d2La6GsXY\r\nqoynr+hCq7i2q1CoTzNddz3McM93/QyKis7PiCeJqz8nuh+4tNs2Ule//nhw\r\n903HVvERPqh0o2laJSIizjvBkrujZDFL/tXAhlLzs/nwCfW8TfiLqPd0g5ut\r\nodHBNonZy+Nw1n5NjRAZS2bAB/wGPxm/2Do=\r\n=iokB\r\n-----END PGP SIGNATURE-----\r\n","size":37762},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_7.3.0_1660427829891_0.36170462825211747"},"_hasShrinkwrap":false,"_cnpmcore_publish_time":"2022-08-13T21:57:13.820Z"},"7.4.0":{"name":"os-paths","version":"7.4.0","description":"Determine common OS/platform paths (home, temp, ...)","license":"MIT","repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"author":{"name":"Roy Ivy III","email":"rivy.dev@gmail.com"},"engines":{"node":">= 4.0"},"packageManager":"yarn@1.22.19","type":"commonjs","main":"./dist/cjs/mod.cjs.js","module":"./dist/cjs/esm-wrapper/mod.esm.js","types":"./dist/types/mod.d.ts","exports":{".":{"deno":"./src/mod.deno.ts","import":"./dist/cjs/esm-wrapper/mod.esm.js","require":"./dist/cjs/mod.cjs.js","types":"./dist/types/mod.d.ts","default":"./dist/cjs/mod.cjs.js"},"./package.json":"./package.json","./cjs":{"require":"./dist/cjs/mod.cjs.js","types":"./dist/cjs/mod.cjs.d.ts"}},"keywords":["common","cross-platform","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","unix","windows"],"scripts":{"# build # build/compile package":"","build":"run-s --silent \"build:*\"","build:cjs":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-cjs.succeeded \"run-s -n rebuild:cjs\"","build:esm":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-esm.succeeded \"run-s -n rebuild:esm\"","build:umd":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-umd.succeeded \"run-s -n rebuild:umd\"","build:lab":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-lab.succeeded \"run-s -n rebuild:lab\"","build:types":"exec-if-updated --source package.json --source tsconfig.json --source \"tsconfig/**\" --source \"rollup.*.config.js\" --source \"src/**\" --target build/.targets/build-types.succeeded \"run-s -n rebuild:types\"","# clean # remove build artifacts":"","clean":"shx rm -fr build dist","# coverage # calculate and display (or send) code coverage [alias: 'cov']":"","coverage":"run-s --silent +:max-node-8 && shx echo \"[coverage] WARN Code coverage skipped [for NodeJS < v10]\" 1>&2 || run-s \"+:coverage\"","cov":"run-s coverage","cov:html":"nyc report --reporter=html --report-dir=.coverage","#* cov:send # use `--cov-send=...` to pass options to coverage uploader":"","cov:send":"shx mkdir -p .coverage && nyc report --reporter=text-lcov > \".coverage/@coverage.lcov\" && cross-env-shell codecov --disable=gcov --file=\".coverage/@coverage.lcov\" $npm_config_cov_send","cov:text":"nyc report","cov:view":"run-s cov:html && cd .coverage && open-cli index.html","dist":"run-s update","# fix # fix package issues (automated/non-interactive)":"","fix":"run-s fix:*","# fix:lint # fix ESLint issues":"","fix:lint":"eslint . --fix","# fix:style # fix Prettier formatting issues":"","fix:style":"prettier . --write --list-different","# help # display help":"","help":"run-s --silent _:help","# lint # check for package code 'lint'":"","lint":"run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"","# lint:audit # check for `npm audit` violations in project code":"","lint:audit":"run-s --silent -- npm audit --omit dev","# lint:commits # check for commit flaws (using `commitlint` and `cspell`)":"","lint:commits":"run-p --silent \"_:lint:commits:new:*\"","# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)":"","lint:editorconfig":"editorconfig-checker -config .ecrc.JS.json","# lint:lint # check for code 'lint' (using `eslint`)":"","lint:lint":"eslint .","# lint:markdown # check for markdown errors (using `remark`)":"","lint:markdown":"remark --quiet .","# lint:spell # check for spelling errors (using `cspell`)":"","lint:spell":"cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"","# lint:style # check for format imperfections (using `prettier`)":"","lint:style":"prettier . --check --loglevel warn","# prerelease # clean, rebuild, and fully test (useful prior to publish/release)":"","prerelease":"run-s clean update verify","# realclean # remove all generated files":"","realclean":"run-s clean && shx rm -fr .coverage .nyc_output","# rebuild # clean and (re-)build project":"","rebuild":"run-s clean build","rebuild:all":"run-s clean build update","rebuild:cjs":"shx rm -fr build/cjs && tsc -p tsconfig/tsconfig.cjs.json && shx cp -r src/esm-wrapper build/cjs/src && shx mkdir -p build/.targets && shx touch build/.targets/build-cjs.succeeded","rebuild:esm":"shx rm -fr build/esm && tsc -p tsconfig/tsconfig.esm.json && shx cp src/esm-wrapper/package.json build/esm/src && shx mkdir -p build/.targets && shx touch build/.targets/build-esm.succeeded","rebuild:umd":"shx rm -fr build/umd && tsc -p tsconfig/tsconfig.umd.json && shx mkdir -p build/.targets && shx touch build/.targets/build-umd.succeeded","rebuild:lab":"shx rm -fr build/lab && tsc -p tsconfig/tsconfig.lab.json && shx cp -r src/esm-wrapper build/lab/src && shx mkdir -p build/.targets && shx touch build/.targets/build-lab.succeeded","rebuild:types":"shx rm -fr build/types && tsc -p tsconfig/tsconfig.types.json && shx mkdir -p build/.targets && shx touch build/.targets/build-types.succeeded","# refresh # clean and rebuild/regenerate all project artifacts":"","refresh":"run-s rebuild:all","# refresh:dist # clean, rebuild, and regenerate project distribution":"","refresh:dist":"run-s rebuild update:dist","# retest # clean and (re-)test project":"","retest":"run-s clean test","# reset:hard # remove *all* generated files and reinstall dependencies":"","reset:hard":"git clean -dfx && git reset --hard && npm install","# show:deps # show package dependencies":"","show:deps":"run-s --silent _:show:deps:prod _:show:deps:dev || shx true","# test # test package":"","test":"run-s --silent lint update:dist && run-p test:*","# test:code # test package code (use `--test-code=...` to pass options to testing harness)":"","test:code":"run-s --silent +:max-node-8 && cross-env-shell ava $npm_config_test_code || ( run-s --silent +:min-node-10 && cross-env-shell nyc --silent ava $npm_config_test_code )","# test:types # test for type declaration errors (using `tsd`)":"","test:types":"run-s --silent +:max-node-8 && shx echo \"[test:types] WARN Type testing skipped [for NodeJS < v10]\" 1>&2 || tsd","# update # update/prepare for distribution [alias: 'dist']":"","update":"run-s update:changelog update:dist","# update:changelog # update CHANGELOG (using `git changelog ...`)":"","update:changelog":"run-s --silent _:update:changelog && git diff --quiet --exit-code CHANGELOG.mkd || shx echo \"[update] info CHANGELOG updated\"","# update:dist # update distribution content":"","update:dist":"run-s --silent build && exec-if-updated --source \"build/**\" --target \"dist/**\" --target build/.targets/update-dist.succeeded \"run-s --silent _:update:dist:rebuild\"","# verify # fully (and verbosely) test package":"","verify":"cross-env npm_config_test_dist=true npm_config_test=--verbose run-s test","## +:... == sub-scripts (may run 'visibly', but not user-facing)":"","+:coverage":"run-s build test:code && ( is-ci && run-s cov:send ) || ( run-s --silent _:is-not-ci && run-s cov:view )","+:max-node-8":"is-node-not-modern 10","+:min-node-10":"is-node-modern 10","## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`":"","_:debug:env":"node -e \"console.log({env: process.env})\"","_:exists:git-changelog":"node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )","* _:help # print usage/TARGETs by matching lines containing leading double-quoted text like `# TARGET_NAME # HELP_TEXT`":"","_:help":"< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%sUsage: \\`\\x1b[2m%s run TARGET\\x1b[m\\` or \\`\\x1b[2mnpx run-s TARGET [TARGET..]\\x1b[m\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:#\\s*)(\\w[^#\\x22]*)\\s+#+\\s+([^\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('\\x1b[0;32m%s\\x1b[m %s', match[1].padEnd(19), match[2]); } }).on('close', () => { /^win/i.test(process.platform) || console.log(); });\"","_:is-not-ci":"is-ci && exit 1 || exit 0","_:lint:commits:all:spell":"node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","* _:lint:commits:new:... * note: review from 'origin/last' or tag just prior to version-sorted latest, with fallback to first commit":"","_:lint:commits:new:commitlint":"node -e \"result=require('child_process').spawnSync('( git tag --list [#v]* --contains origin/last --sort=v:refname || shx true ) && ( git describe --tags --abbrev=0 HEAD~1 || shx true ) && ( git rev-list --max-parents=0 HEAD --abbrev-commit --abbrev=16 || shx true )',{shell:true,encoding:'utf-8'}); o=result.stdout.split(/\\r?\\n/).filter((s)=>!!s); vs=o; v=vs[0]; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from '+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found (within \\'%s..HEAD\\')\\n'+result.stdout+'\\n'+result.stderr, v); process.exit(1);} else { (result.stdout.length > 0) && console.log(result.stdout);};\" || shx true","_:lint:commits:new:spell":"node -e \"result=require('child_process').spawnSync('( git tag --list [#v]* --contains origin/last --sort=v:refname || shx true ) && ( git describe --tags --abbrev=0 HEAD~1 || shx true ) && ( git rev-list --max-parents=0 HEAD --abbrev-commit --abbrev=16 || shx true )',{shell:true,encoding:'utf-8'}); o=result.stdout.split(/\\r?\\n/).filter((s)=>!!s); vs=o; v=vs[0]; result=require('child_process').spawnSync('git log '+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s) (within \\'%s..HEAD\\')\\n'+result.stdout+'\\n'+result.stderr, v); process.exit(1);} else {(result.stdout.length > 0) && console.log(result.stdout);};\" || shx true","_:show:deps:dev":"npm --silent ls --only development || shx true","_:show:deps:prod":"npm --silent ls --only production || shx true","_:vcs-clean":"git diff --quiet","_:vcs-clean-err":"run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )","_:vcs-strictly-clean":"git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"","_:vcs-strictly-clean-err":"run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )","_:update:changelog":"run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2","_:update:dist.build":"shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm","_:update:dist.normalizeEOL":"eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}","_:update:dist.pack":"node -e \"delete process.env.npm_config_dry_run; name=require('./package.json').name; name=name.replace(/^@/,'').replace('/','-'); result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"","_:update:dist.types":"shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && replace-in-file \"export { _default as default }\" \"export = _default\" dist/types/mod.cjs.d.ts --quiet && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs","_:update:dist:rebuild":"shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch build/.targets/update-dist.succeeded","_:version:spell:changelog_update":"run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2","_:version:update:changelog":"run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {m='fs';require(m).writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2","## npm lifecycle scripts ##":"","prepublishOnly":"run-s clean update && cross-env npm_config_test_dist=true npm run test && run-s --silent update _:vcs-strictly-clean-err","## npm-version scripts ##":"","preversion":"run-s --silent _:version:spell:changelog_update && cross-env npm_config_test_dist=true npm run test","version":"run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"},"dependencies":{"fsevents":"*"},"devDependencies:#":"* for testing, Node-v6 requires ava < v2 and nyc < v15","devDependencies":{"@ava/typescript":"^1.1.1","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@istanbuljs/nyc-config-typescript":"^1.0.1","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4","@typescript-eslint/parser":"^4","ava":"^3.15.0","codecov":"^3.5.0","command-exists":"^1.2.9","cross-env":"^7.0.3","cross-spawn":"^7.0.3","cspell":"^4.2.7","editorconfig-checker":"^3.3.0","eol-converter-cli":"^1.0.8","eslint":"^7","eslint-config-prettier":"^7","eslint-plugin-eslint-comments":"^3","eslint-plugin-functional":"^3","eslint-plugin-import":"^2","eslint-plugin-security":"^1","eslint-plugin-security-node":"^1","exec-if-updated":"https://cdn.jsdelivr.net/gh/rivy/js-cli.exec-if-updated@2.2.0/dist/pkg/exec-if-updated.tgz","is-ci":"^2.0.0","is-node-modern":"^1.0.0","npm-run-all":"^4.1.5","nyc":"^15.1.0","open-cli":">=6.0 <7.0","prettier":"^2.1.1","remark-cli":"=9.0.0","remark-footnotes":"^3.0.0","remark-preset-lint-consistent":"^4.0.0","remark-preset-lint-markdown-style-guide":"^4.0.0","remark-preset-lint-recommended":"^5.0.0","remark-retext":"^4.0.0","replace-in-file":"=6.3.0","retext-english":"^3.0.4","retext-passive":"^3.0.0","retext-repeated-words":"^3.0.0","retext-sentence-spacing":"^4.0.0","retext-syntax-urls":"^2.0.0","rollup":"^2.36.1","rollup-plugin-dts":"^2.0.1","rollup-plugin-typescript2":"^0.29.0","shx":"^0.3.3","ts-node":"^9.0.0","tsd":"^0.14.0","typedoc":"^0.20.27","typescript":"~4.2.0","unified":"^9.2.0"},"optionalDependencies:#":"* 'fsevents' included to avoid `npm ci` errors with early npm versions; ref: <https://github.com/bahmutov/npm-install/issues/103>","optionalDependencies":{"fsevents":"*"},"ava":{"files":["!**/*.test-d.ts"],"timeout":"60s","typescript":{"rewritePaths":{"src/":"build/lab/src/"}}},"nyc":{"extends":"@istanbuljs/nyc-config-typescript","exclude":["build/cjs/**","build/esm/**","build/umd/**","dist/**","eg/**","test/**","**/*.test.*","**/*.spec.*"],"reporter":["html","text"],"lines":"100","branches":"96","statements":"100"},"tsd":{"directory":"test"},"gitHead":"96af485748e5b973afe00905701bce30a337b228","bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","_id":"os-paths@7.4.0","_nodeVersion":"10.23.1","_npmVersion":"7.24.2","dist":{"integrity":"sha512-Ux1J4NUqC6tZayBqLN1kUlDAEvLiQlli/53sSddU4IN+h+3xxnv2HmRSMpVSvr1hvJzotfMs3ERvETGK+f4OwA==","shasum":"3354f1814425c232b6f42138a90e4000af6f9692","tarball":"https://registry.npmmirror.com/os-paths/-/os-paths-7.4.0.tgz","fileCount":14,"unpackedSize":131419,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCij2mkGLybePds1+cSjF94/aNVcCfTMxxQ+e3ITg2qQAIhAKCvUxdcggEc25oRzi6ImzFdZDy9Jboc2v5oukn6HAYp"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj4YO2ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoGww/8CnDLbdWfVRMQBpwfWGUCwwUNOcf4RGCCo8oB8Tev5fHrBkKg\r\n65mUgkGgOwZC02NQ6uIROoFkb+BAer0GSCj5gXAnhGKeT1ZHVK94/GoPNgT7\r\nlo3hLrNQK3Qd5VxRplNFV/mRKONUxMunGXstKWGa+NYeL7lTdfEfieDNUk3V\r\npntd56KmoitcEjod8ye65Lx7cWsgSkLWNxEAXovu/DXu7s2K0sWScrSsxYXg\r\nMiKFxXfGfB1nC0Ae5czZckTS/zH377tMQUDJy3aDn+KIcRU8FHk5oA59+pe+\r\nu/SmbS6Q+2KYPZSvL6DIWAcsyxhl2EkZbQupcZ1dFjteXwvlhYlKTF6s0qw7\r\nsvb5Eg4YPR9ykGVmy86Q4V4jL97rVZlQBYGHUQG2aRhv22AvABfcNOrBAUXN\r\n9ny9E6Tzpxx+VAFxfyUWxE4e28sZP72XlG6BdjIchnXeXUEY7g9sgBGzpnG8\r\n8qq9NPue0tR7vFG0anQMVPtKUR94SthepZyyFRjXfbkMqKg2m8LnkZDBaBMz\r\n4l6R4aVYMhjaA5cl9ATNKnZCM6R8nxGusK9HnOZnQfNPhu0hRxnZIASQDNjF\r\nqS8UtlzFRkFsyM6kl34au4+vvTGnsHW30vHMnl+MjvHrnUBgldCv2GFY4If2\r\nHlwV674OoxX6d7ggR9p/VtkzV+1y8zKj23E=\r\n=9WZl\r\n-----END PGP SIGNATURE-----\r\n","size":39343},"_npmUser":{"name":"rivy","email":"rivy.dev@gmail.com"},"directories":{},"maintainers":[{"name":"rivy","email":"rivy.dev@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/os-paths_7.4.0_1675723701809_0.945919181472233"},"_hasShrinkwrap":false,"_cnpmcore_publish_time":"2023-02-06T22:48:22.067Z","publish_time":1675723702067}},"bugs":{"url":"https://github.com/rivy/js.os-paths/issues"},"homepage":"https://github.com/rivy/js.os-paths#readme","keywords":["common","cross-platform","directory","environment","linux","mac","macos","node4","node6","node-v4","node-v6","osx","path","paths","portable","unix","windows"],"repository":{"type":"git","url":"git+https://github.com/rivy/js.os-paths.git"},"_source_registry_name":"default"}